/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Facebook
 *
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ config ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô TEST CONFIGURATION
 * 2. ‡∏£‡∏±‡∏ô: node test-comment-system.js
 *
 * ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:
 * - ‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
 * - ‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á Facebook bot
 * - ‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ comment config
 * - ‚úì ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö comment event
 * - ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö custom message
 * - ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö AI
 * - ‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ä‡∏ó (pull to chat)
 * - ‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö comment logs
 */

const { MongoClient, ObjectId } = require("mongodb");
const axios = require("axios");
require("dotenv").config();

// ==================== TEST CONFIGURATION ====================
const TEST_CONFIG = {
  // ‡πÉ‡∏™‡πà Page ID ‡πÅ‡∏•‡∏∞ Post ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  pageId: "YOUR_PAGE_ID", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Page ID ‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ObjectId ‡∏à‡∏≤‡∏Å database
  postId: "123456789_987654321", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Post ID ‡∏à‡∏£‡∏¥‡∏á

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö comment
  mockComment: {
    id: "comment_" + Date.now(),
    message: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏∞",
    from: {
      id: "test_user_" + Date.now(),
      name: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
    }
  },

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á API ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  sendRealAPI: false, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô true ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á API ‡∏à‡∏£‡∏¥‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ access token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
};

// ==================== DATABASE CONNECTION ====================
const MONGODB_URI = process.env.MONGODB_URI || "mongodb://127.0.0.1:27017";
let client;

async function connectDB() {
  if (!client) {
    client = new MongoClient(MONGODB_URI);
    await client.connect();
  }
  return client;
}

// ==================== TEST FUNCTIONS ====================

/**
 * 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
 */
async function testDatabaseConnection() {
  console.log("\nüìä [TEST 1] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database...");
  try {
    const client = await connectDB();
    const db = client.db("chatbot");
    await db.command({ ping: 1 });
    console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    return true;
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error.message);
    return false;
  }
}

/**
 * 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Facebook Bot
 */
async function testFacebookBotExists(pageId) {
  console.log("\nü§ñ [TEST 2] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Facebook Bot...");
  try {
    const client = await connectDB();
    const db = client.db("chatbot");
    const coll = db.collection("facebook_bots");

    const bot = ObjectId.isValid(pageId)
      ? await coll.findOne({ _id: new ObjectId(pageId) })
      : await coll.findOne({ pageId: pageId });

    if (!bot) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Facebook Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pageId:", pageId);
      console.log("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Facebook Bot ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
      return null;
    }

    console.log("‚úÖ ‡∏û‡∏ö Facebook Bot:", bot.name || bot.pageName);
    console.log("   - Page ID:", bot.pageId);
    console.log("   - Status:", bot.status);
    console.log("   - Has Access Token:", !!bot.accessToken);
    return bot;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return null;
  }
}

/**
 * 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Comment Config
 */
async function testGetCommentConfig(pageId, postId) {
  console.log("\n‚öôÔ∏è  [TEST 3] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Comment Config...");
  try {
    const client = await connectDB();
    const db = client.db("chatbot");
    const coll = db.collection("facebook_comment_configs");

    const config = await coll.findOne({
      pageId: ObjectId.isValid(pageId) ? new ObjectId(pageId) : pageId,
      postId: postId,
      isActive: true,
    });

    if (!config) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö postId:", postId);
      console.log("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô");
      return null;
    }

    console.log("‚úÖ ‡∏û‡∏ö Comment Config:");
    console.log("   - Post ID:", config.postId);
    console.log("   - Reply Type:", config.replyType);
    console.log("   - Pull to Chat:", config.pullToChat ? "Yes" : "No");
    console.log("   - Is Active:", config.isActive ? "Yes" : "No");

    if (config.replyType === "custom") {
      console.log("   - Custom Message:", config.customMessage?.substring(0, 50) + "...");
    } else if (config.replyType === "ai") {
      console.log("   - AI Model:", config.aiModel);
      console.log("   - System Prompt:", config.systemPrompt?.substring(0, 50) + "...");
    }

    return config;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return null;
  }
}

/**
 * 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö Custom Message
 */
async function testCustomMessageReply(config, commentData) {
  console.log("\nüí¨ [TEST 4] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö Custom Message...");

  if (config.replyType !== "custom") {
    console.log("‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (config ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà custom type)");
    return true;
  }

  try {
    const replyMessage = config.customMessage;
    console.log("‚úÖ Custom Message:");
    console.log("   ‚Üí", replyMessage);

    if (TEST_CONFIG.sendRealAPI) {
      console.log("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á API ‡∏à‡∏£‡∏¥‡∏á...");
      // ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤ sendRealAPI = true
      console.log("‚ö†Ô∏è  (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sendRealAPI = false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)");
    } else {
      console.log("‚úì ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á API ‡∏à‡∏£‡∏¥‡∏á)");
    }

    return true;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö AI
 */
async function testAIReply(config, commentData) {
  console.log("\nü§ñ [TEST 5] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö AI...");

  if (config.replyType !== "ai") {
    console.log("‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (config ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ai type)");
    return true;
  }

  try {
    console.log("   - AI Model:", config.aiModel);
    console.log("   - System Prompt:", config.systemPrompt?.substring(0, 80) + "...");
    console.log("   - Comment Text:", commentData.message);

    if (!process.env.OPENAI_API_KEY) {
      console.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö OPENAI_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env");
      console.log("   ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà logic ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return true;
    }

    console.log("‚úÖ AI Config ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    console.log("   (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î token)");

    return true;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ä‡∏ó (Pull to Chat)
 */
async function testPullToChat(config, commentData, bot) {
  console.log("\nüíº [TEST 6] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ä‡∏ó (Pull to Chat)...");

  if (!config.pullToChat) {
    console.log("‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Pull to Chat ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà)");
    return true;
  }

  try {
    const commenterId = commentData.from.id;
    const commenterName = commentData.from.name;

    console.log("   - Commenter ID:", commenterId);
    console.log("   - Commenter Name:", commenterName);

    const client = await connectDB();
    const db = client.db("chatbot");
    const chatColl = db.collection("chat_history");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ chat history ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingChat = await chatColl.findOne({
      senderId: commenterId,
      platform: "facebook",
    });

    if (existingChat) {
      console.log("‚úì ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ chat history ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ã‡πâ‡∏≥)");
      console.log("   - Last Message:", existingChat.content?.substring(0, 50) + "...");
    } else {
      console.log("‚úì ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ chat history");
      console.log("   - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ä‡∏ó:");
      const welcomeMessage = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${commenterName} üëã\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à! ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö`;
      console.log("   ‚Üí", welcomeMessage);

      if (TEST_CONFIG.sendRealAPI) {
        console.log("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á private message ‡∏à‡∏£‡∏¥‡∏á...");
        console.log("‚ö†Ô∏è  (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sendRealAPI = false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)");
      } else {
        console.log("‚úì ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á private message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }

    console.log("‚úÖ Pull to Chat logic ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return true;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Comment Log
 */
async function testSaveCommentLog(config, commentData, bot) {
  console.log("\nüìù [TEST 7] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Comment Log...");

  try {
    const client = await connectDB();
    const db = client.db("chatbot");
    const logColl = db.collection("facebook_comment_logs");

    const testLog = {
      pageId: bot._id,
      postId: config.postId,
      commentId: commentData.id,
      commentText: commentData.message,
      commenterId: commentData.from.id,
      commenterName: commentData.from.name,
      replyType: config.replyType,
      replyMessage: config.replyType === "custom" ? config.customMessage : "AI Generated Reply (Test)",
      pulledToChat: config.pullToChat,
      timestamp: new Date(),
      isTest: true, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô test log
    };

    console.log("‚úì ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log:");
    console.log("   - Comment ID:", testLog.commentId);
    console.log("   - Comment Text:", testLog.commentText);
    console.log("   - Reply Type:", testLog.replyType);
    console.log("   - Pulled to Chat:", testLog.pulledToChat);

    // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î test data ‡πÉ‡∏ô database
    console.log("‚úÖ Comment Log structure ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á)");

    // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô logs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const logCount = await logColl.countDocuments({ isTest: { $ne: true } });
    console.log(`   - ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ ${logCount} comment logs ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`);

    return true;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook Structure
 */
async function testWebhookStructure() {
  console.log("\nüîó [TEST 8] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook Structure...");

  try {
    const mockWebhookPayload = {
      object: "page",
      entry: [
        {
          id: "PAGE_ID",
          time: Date.now(),
          changes: [
            {
              field: "feed",
              value: {
                item: "comment",
                verb: "add",
                post_id: TEST_CONFIG.postId,
                comment_id: TEST_CONFIG.mockComment.id,
                message: TEST_CONFIG.mockComment.message,
                from: TEST_CONFIG.mockComment.from,
              },
            },
          ],
        },
      ],
    };

    console.log("‚úì Webhook Payload Structure:");
    console.log(JSON.stringify(mockWebhookPayload, null, 2));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö structure
    const hasValidStructure =
      mockWebhookPayload.object === "page" &&
      Array.isArray(mockWebhookPayload.entry) &&
      mockWebhookPayload.entry[0].changes &&
      mockWebhookPayload.entry[0].changes[0].field === "feed";

    if (hasValidStructure) {
      console.log("‚úÖ Webhook structure ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    } else {
      console.log("‚ùå Webhook structure ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    return hasValidStructure;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Facebook Webhook Subscription
 */
async function testWebhookSubscription(bot) {
  console.log("\nüì° [TEST 9] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Webhook Configuration...");

  try {
    console.log("   - Webhook URL:", bot.webhookUrl || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤");
    console.log("   - Verify Token:", bot.verifyToken ? "‚úì ‡∏°‡∏µ" : "‚úó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ");

    if (!bot.webhookUrl) {
      console.log("‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL");
      console.log("   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡πÅ‡∏•‡∏∞‡∏Å‡∏î '‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook URL'");
      return false;
    }

    if (!bot.verifyToken) {
      console.log("‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Verify Token");
      return false;
    }

    console.log("‚úÖ Webhook Configuration ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    console.log("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Facebook Webhook:");
    console.log("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Facebook App Dashboard");
    console.log("   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Products > Webhooks");
    console.log("   3. Subscribe to Page events");
    console.log("   4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'feed' subscription (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö comments)");
    console.log("   5. ‡πÉ‡∏™‡πà Callback URL:", bot.webhookUrl);
    console.log("   6. ‡πÉ‡∏™‡πà Verify Token:", bot.verifyToken);

    return true;
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    return false;
  }
}

/**
 * 10. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function printTestSummary(results) {
  console.log("\n" + "=".repeat(60));
  console.log("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö");
  console.log("=".repeat(60));

  const passed = results.filter(r => r.passed).length;
  const total = results.length;

  results.forEach(result => {
    const icon = result.passed ? "‚úÖ" : "‚ùå";
    console.log(`${icon} ${result.name}`);
  });

  console.log("\n" + "=".repeat(60));
  console.log(`‡∏ú‡∏•‡∏£‡∏ß‡∏°: ${passed}/${total} ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô`);

  if (passed === total) {
    console.log("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!");
  } else {
    console.log("‚ö†Ô∏è  ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô");
  }

  console.log("=".repeat(60) + "\n");
}

// ==================== MAIN TEST RUNNER ====================
async function runAllTests() {
  console.log("\n" + "=".repeat(60));
  console.log("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Facebook");
  console.log("=".repeat(60));

  const results = [];

  // Test 1: Database Connection
  const dbConnected = await testDatabaseConnection();
  results.push({ name: "Database Connection", passed: dbConnected });
  if (!dbConnected) {
    console.log("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database ‡πÑ‡∏î‡πâ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö");
    printTestSummary(results);
    process.exit(1);
  }

  // Test 2: Facebook Bot Exists
  const bot = await testFacebookBotExists(TEST_CONFIG.pageId);
  results.push({ name: "Facebook Bot Exists", passed: !!bot });
  if (!bot) {
    console.log("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Facebook Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö");
    printTestSummary(results);
    process.exit(1);
  }

  // Test 3: Comment Config
  const config = await testGetCommentConfig(TEST_CONFIG.pageId, TEST_CONFIG.postId);
  results.push({ name: "Comment Config Exists", passed: !!config });
  if (!config) {
    console.log("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment Config ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö");
    printTestSummary(results);
    process.exit(1);
  }

  // Test 4: Custom Message Reply
  const customTest = await testCustomMessageReply(config, TEST_CONFIG.mockComment);
  results.push({ name: "Custom Message Reply", passed: customTest });

  // Test 5: AI Reply
  const aiTest = await testAIReply(config, TEST_CONFIG.mockComment);
  results.push({ name: "AI Reply", passed: aiTest });

  // Test 6: Pull to Chat
  const pullTest = await testPullToChat(config, TEST_CONFIG.mockComment, bot);
  results.push({ name: "Pull to Chat", passed: pullTest });

  // Test 7: Save Comment Log
  const logTest = await testSaveCommentLog(config, TEST_CONFIG.mockComment, bot);
  results.push({ name: "Save Comment Log", passed: logTest });

  // Test 8: Webhook Structure
  const webhookTest = await testWebhookStructure();
  results.push({ name: "Webhook Structure", passed: webhookTest });

  // Test 9: Webhook Subscription
  const subscriptionTest = await testWebhookSubscription(bot);
  results.push({ name: "Webhook Configuration", passed: subscriptionTest });

  // Print Summary
  printTestSummary(results);

  // Close database connection
  if (client) {
    await client.close();
  }

  process.exit(0);
}

// ==================== RUN TESTS ====================
if (require.main === module) {
  runAllTests().catch((error) => {
    console.error("\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", error);
    process.exit(1);
  });
}

module.exports = {
  testDatabaseConnection,
  testFacebookBotExists,
  testGetCommentConfig,
  testCustomMessageReply,
  testAIReply,
  testPullToChat,
  testSaveCommentLog,
  testWebhookStructure,
  testWebhookSubscription,
};
