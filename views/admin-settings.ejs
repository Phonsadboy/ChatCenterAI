<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ตั้งค่าระบบ - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        .settings-card {
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .settings-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px 10px 0 0;
        }
        .settings-body {
            padding: 25px;
        }
        .form-control, .form-select {
            border-radius: 8px;
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
        }
        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .btn-save {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 8px;
            padding: 12px 30px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .setting-item {
            margin-bottom: 25px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .setting-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
        }
        .setting-description {
            color: #6c757d;
            font-size: 0.9em;
            margin-bottom: 15px;
        }
        .alert-custom {
            border-radius: 8px;
            border: none;
            padding: 15px 20px;
        }
        .nav-tabs .nav-link {
            border-radius: 8px 8px 0 0;
            border: none;
            color: #6c757d;
            font-weight: 500;
        }
        .nav-tabs .nav-link.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
        }
        .back-button {
            background: #6c757d;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            color: white;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }
        .back-button:hover {
            background: #5a6268;
            color: white;
            text-decoration: none;
            transform: translateX(-2px);
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="mb-0">
                        <i class="fas fa-cogs text-primary me-2"></i>
                        ตั้งค่าระบบ
                    </h2>
                    <a href="/admin/dashboard" class="back-button">
                        <i class="fas fa-arrow-left"></i>
                        กลับไปหน้าแอดมิน
                    </a>
                </div>
                <hr>
            </div>
        </div>

        <!-- Alert Messages -->
        <div id="alertContainer"></div>

        <!-- Settings Tabs -->
        <ul class="nav nav-tabs mb-4" id="settingsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat-settings" type="button" role="tab">
                    <i class="fas fa-comments me-2"></i>การตั้งค่าแชท
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="ai-tab" data-bs-toggle="tab" data-bs-target="#ai-settings" type="button" role="tab">
                    <i class="fas fa-robot me-2"></i>การตั้งค่า AI
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="system-tab" data-bs-toggle="tab" data-bs-target="#system-settings" type="button" role="tab">
                    <i class="fas fa-server me-2"></i>การตั้งค่าระบบ
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="filter-tab" data-bs-toggle="tab" data-bs-target="#filter-settings" type="button" role="tab">
                    <i class="fas fa-filter me-2"></i>การกรองข้อความ
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="settingsTabContent">
            <!-- Chat Settings Tab -->
            <div class="tab-pane fade show active" id="chat-settings" role="tabpanel">
                <div class="row">
                    <div class="col-12">
                        <div class="settings-card">
                            <div class="settings-header">
                                <h4 class="mb-0">
                                    <i class="fas fa-clock me-2"></i>
                                    การตั้งค่าแชทและคิวข้อความ
                                </h4>
                                <p class="text-muted mb-0">
                                    ระบบจะรอข้อความจากผู้ใช้ตามเวลาที่กำหนด เพื่อรวมข้อความหลายข้อความเข้าด้วยกันก่อนส่งให้ AI ประมวลผล
                                </p>
                            </div>
                            <div class="settings-body">
                                <form id="chatSettingsForm">
                                    <div class="setting-item">
                                        <div class="setting-label">ระยะเวลาดีเลย์ก่อนตอบผู้ใช้ (วินาที)</div>
                                        <div class="setting-description">
                                            ระยะเวลารอเพื่อรวมข้อความหลายข้อความเข้าด้วยกันก่อนตอบกลับ
                                            <br><strong>การทำงาน:</strong> เมื่อผู้ใช้ส่งข้อความ ระบบจะรอตามเวลาที่กำหนดนี้ 
                                            หากมีข้อความใหม่เข้ามาในระหว่างนี้ ระบบจะรีเซ็ตตัวจับเวลาและรอใหม่
                                        </div>
                                        <input type="number" class="form-control" id="chatDelaySeconds" 
                                               min="1" max="60" step="1" placeholder="5" value="5">
                                        <small class="text-muted">แนะนำ: 3-10 วินาที | ค่าปัจจุบัน: <span id="currentChatDelay">5</span> วินาที</small>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">จำนวนข้อความสูงสุดในคิว</div>
                                        <div class="setting-description">
                                            จำนวนข้อความสูงสุดที่จะรอรวมก่อนตอบกลับ
                                            <br><strong>การทำงาน:</strong> หากจำนวนข้อความในคิวถึงขีดจำกัดนี้ ระบบจะประมวลผลทันทีโดยไม่รอเวลา delay
                                        </div>
                                        <input type="number" class="form-control" id="maxQueueMessages" 
                                               min="1" max="20" step="1" placeholder="10" value="10">
                                        <small class="text-muted">แนะนำ: 5-15 ข้อความ | ค่าปัจจุบัน: <span id="currentMaxQueue">10</span> ข้อความ</small>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">เปิดใช้งานการรวมข้อความ</div>
                                        <div class="setting-description">
                                            รวมข้อความหลายข้อความเข้าด้วยกันก่อนส่งให้ AI ประมวลผล
                                            <br><strong>การทำงาน:</strong> เมื่อเปิดใช้งาน ระบบจะรวมข้อความหลายข้อความเข้าด้วยกันด้วยเครื่องหมายขึ้นบรรทัดใหม่
                                            หากปิดใช้งาน ระบบจะประมวลผลทีละข้อความ
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enableMessageMerging" checked>
                                            <label class="form-check-label" for="enableMessageMerging">
                                                เปิดใช้งาน
                                            </label>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-save text-white">
                                        <i class="fas fa-save me-2"></i>
                                        บันทึกการตั้งค่าแชท
                                    </button>
                                </form>
                                
                                <!-- ข้อความสรุปการทำงานของระบบคิว -->
                                <div class="alert alert-info mt-3">
                                    <h6><i class="fas fa-info-circle me-2"></i>สรุปการทำงานของระบบคิว:</h6>
                                    <ul class="mb-0">
                                        <li><strong>ข้อความแรก:</strong> ระบบจะเริ่มนับเวลา delay ตามที่ตั้งไว้</li>
                                        <li><strong>ข้อความเพิ่ม:</strong> หากมีข้อความใหม่เข้ามา ระบบจะรีเซ็ตตัวจับเวลาและรอใหม่</li>
                                        <li><strong>ครบเวลา delay:</strong> ระบบจะประมวลผลข้อความทั้งหมดในคิว</li>
                                        <li><strong>ครบจำนวนข้อความ:</strong> หากจำนวนข้อความถึงขีดจำกัด ระบบจะประมวลผลทันที</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI Settings Tab -->
            <div class="tab-pane fade" id="ai-settings" role="tabpanel">
                <div class="row">
                    <div class="col-12">
                        <div class="settings-card">
                            <div class="settings-header">
                                <h4 class="mb-0">
                                    <i class="fas fa-robot me-2"></i>
                                    การตั้งค่า AI Model
                                </h4>
                            </div>
                            <div class="settings-body">
                                <form id="aiSettingsForm">
                                    <div class="setting-item">
                                        <div class="setting-label">โมเดลสำหรับข้อความธรรมดา</div>
                                        <div class="setting-description">
                                            โมเดล AI ที่ใช้สำหรับการตอบกลับข้อความที่ไม่มีการ์ดหรือรูปภาพ
                                        </div>
                                        <select class="form-select" id="textModel">
                                            <option value="gpt-5">GPT-5</option>
                                            <option value="gpt-5-mini">GPT-5 Mini</option>
                                            <option value="gpt-5-chat-latest">GPT-5 Chat Latest</option>
                                            <option value="gpt-4.1">GPT-4.1</option>
                                            <option value="o3">O3</option>
                                        </select>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">โมเดลสำหรับรูปภาพ</div>
                                        <div class="setting-description">
                                            โมเดล AI ที่ใช้สำหรับการประมวลผลรูปภาพ (Vision)
                                        </div>
                                        <select class="form-select" id="visionModel">
                                            <option value="gpt-5">GPT-5 (รองรับรูปภาพและข้อความ)</option>
                                            <option value="gpt-5-mini">GPT-5 Mini (รองรับรูปภาพพื้นฐาน)</option>
                                            <option value="gpt-5-chat-latest">GPT-5 Chat Latest (รองรับรูปภาพล่าสุด)</option>
                                            <option value="gpt-4.1">GPT-4.1 (รองรับรูปภาพคุณภาพสูง)</option>
                                            <option value="o3">O3 (รองรับรูปภาพ)</option>
                                        </select>
                                    </div>



                                    <div class="setting-item">
                                        <div class="setting-label">จำนวนรูปภาพสูงสุดต่อข้อความ</div>
                                        <div class="setting-description">
                                            จำกัดจำนวนรูปภาพที่ AI จะประมวลผลในครั้งเดียวเพื่อควบคุมต้นทุน
                                        </div>
                                        <input type="number" class="form-control" id="maxImagesPerMessage" 
                                               min="1" max="10" step="1" placeholder="3" value="3">
                                        <small class="text-muted">แนะนำ: 2-5 รูปภาพ</small>
                                    </div>

                                    <button type="submit" class="btn btn-save text-white">
                                        <i class="fas fa-save me-2"></i>
                                        บันทึกการตั้งค่า AI
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Settings Tab -->
            <div class="tab-pane fade" id="system-settings" role="tabpanel">
                <div class="row">
                    <div class="col-12">
                        <div class="settings-card">
                            <div class="settings-header">
                                <h4 class="mb-0">
                                    <i class="fas fa-server me-2"></i>
                                    การตั้งค่าระบบทั่วไป
                                </h4>
                            </div>
                            <div class="settings-body">
                                <form id="systemSettingsForm">
                                    <div class="setting-item">
                                        <div class="setting-label">สถานะการใช้งาน AI</div>
                                        <div class="setting-description">
                                            เปิด/ปิดการใช้งาน AI ในระบบทั้งหมด
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="aiEnabled" checked>
                                            <label class="form-check-label" for="aiEnabled">
                                                เปิดใช้งาน AI
                                            </label>
                                        </div>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">การบันทึกประวัติแชท</div>
                                        <div class="setting-description">
                                            เปิด/ปิดการบันทึกประวัติการสนทนาของผู้ใช้
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enableChatHistory" checked>
                                            <label class="form-check-label" for="enableChatHistory">
                                                บันทึกประวัติแชท
                                            </label>
                                        </div>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">การแจ้งเตือนแอดมิน</div>
                                        <div class="setting-description">
                                            แจ้งเตือนแอดมินเมื่อมีข้อความใหม่จากผู้ใช้
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enableAdminNotifications" checked>
                                            <label class="form-check-label" for="enableAdminNotifications">
                                                แจ้งเตือนแอดมิน
                                            </label>
                                        </div>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">โหมดการทำงาน</div>
                                        <div class="setting-description">
                                            เลือกโหมดการทำงานของระบบ
                                        </div>
                                        <select class="form-select" id="systemMode">
                                            <option value="production">Production (ใช้งานจริง)</option>
                                            <option value="development">Development (พัฒนา)</option>
                                            <option value="maintenance">Maintenance (บำรุงรักษา)</option>
                                        </select>
                                    </div>

                                    <button type="submit" class="btn btn-save text-white">
                                        <i class="fas fa-save me-2"></i>
                                        บันทึกการตั้งค่าระบบ
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filter Settings Tab -->
            <div class="tab-pane fade" id="filter-settings" role="tabpanel">
                <div class="row">
                    <div class="col-12">
                        <div class="settings-card">
                            <div class="settings-header">
                                <h4 class="mb-0">
                                    <i class="fas fa-filter me-2"></i>
                                    การตั้งค่าการกรองข้อความ Assistant
                                </h4>
                            </div>
                            <div class="settings-body">
                                <form id="filterSettingsForm">
                                    <div class="setting-item">
                                        <div class="setting-label">เปิดใช้งานการกรองข้อความ</div>
                                        <div class="setting-description">
                                            เปิด/ปิดการกรองข้อความในแท็กของ Assistant เพื่อซ่อนหรือแสดงข้อความตามที่กำหนด
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enableMessageFiltering" checked>
                                            <label class="form-check-label" for="enableMessageFiltering">
                                                เปิดใช้งานการกรอง
                                            </label>
                                        </div>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">คำที่ต้องการซ่อน (หนึ่งคำต่อบรรทัด)</div>
                                        <div class="setting-description">
                                            ใส่คำหรือวลีที่ต้องการซ่อนจากข้อความของ Assistant (ไม่คำนึงถึงตัวพิมพ์เล็ก-ใหญ่)
                                        </div>
                                        <textarea class="form-control" id="hiddenWords" rows="6" 
                                                  placeholder="ตัวอย่าง:&#10;คำหยาบ&#10;ข้อมูลส่วนตัว&#10;ลิงก์ที่ไม่เหมาะสม"></textarea>
                                        <small class="text-muted">แต่ละคำหรือวลีให้ใส่ในบรรทัดใหม่</small>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">คำที่ต้องการแทนที่</div>
                                        <div class="setting-description">
                                            ใส่คำหรือวลีที่ต้องการใช้แทนที่คำที่ซ่อน (ถ้าไม่ใส่จะใช้ [ข้อความถูกซ่อน])
                                        </div>
                                        <input type="text" class="form-control" id="replacementText" 
                                               placeholder="[ข้อความถูกซ่อน]">
                                        <small class="text-muted">ถ้าไม่ใส่จะใช้ "[ข้อความถูกซ่อน]" เป็นค่าเริ่มต้น</small>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">การกรองแบบละเอียด</div>
                                        <div class="setting-description">
                                            เปิดใช้งานการกรองแบบละเอียด (กรองทั้งคำเดี่ยวและวลีที่ประกอบด้วยคำที่ซ่อน)
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enableStrictFiltering" checked>
                                            <label class="form-check-label" for="enableStrictFiltering">
                                                เปิดใช้งานการกรองแบบละเอียด
                                            </label>
                                        </div>
                                    </div>

                                    <div class="setting-item">
                                        <div class="setting-label">แสดงตัวอย่างการกรอง</div>
                                        <div class="setting-description">
                                            ทดสอบการกรองข้อความกับข้อความตัวอย่าง
                                        </div>
                                        <textarea class="form-control" id="testMessage" rows="3" 
                                                  placeholder="ใส่ข้อความที่ต้องการทดสอบการกรอง"></textarea>
                                        <button type="button" class="btn btn-outline-primary mt-2" onclick="testFiltering()">
                                            <i class="fas fa-eye me-2"></i>ทดสอบการกรอง
                                        </button>
                                        <div id="testResult" class="mt-2 p-3 bg-light rounded" style="display: none;"></div>
                                    </div>

                                    <button type="submit" class="btn btn-save text-white">
                                        <i class="fas fa-save me-2"></i>
                                        บันทึกการตั้งค่าการกรอง
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentSettings = {};

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadSettings();
            setupEventListeners();
        });

        // Setup event listeners
        function setupEventListeners() {
            // Chat settings form
            document.getElementById('chatSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveChatSettings();
            });

            // AI settings form
            document.getElementById('aiSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveAISettings();
            });

            // System settings form
            document.getElementById('systemSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveSystemSettings();
            });

            // Filter settings form
            document.getElementById('filterSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveFilterSettings();
            });

            // Real-time updates for chat delay and queue settings
            document.getElementById('chatDelaySeconds').addEventListener('input', function(e) {
                document.getElementById('currentChatDelay').textContent = e.target.value;
            });

            document.getElementById('maxQueueMessages').addEventListener('input', function(e) {
                document.getElementById('currentMaxQueue').textContent = e.target.value;
            });

            // Tab change event
            document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', function(e) {
                    // Refresh settings when tab changes
                    loadSettings();
                });
            });
        }

        // Load current settings
        async function loadSettings() {
            try {
                const response = await fetch('/api/settings');
                if (response.ok) {
                    currentSettings = await response.json();
                    populateSettings();
                } else {
                    showAlert('ไม่สามารถโหลดการตั้งค่าได้', 'danger');
                }
            } catch (error) {
                console.error('Error loading settings:', error);
                showAlert('เกิดข้อผิดพลาดในการโหลดการตั้งค่า', 'danger');
            }
        }

        // Populate settings in form
        function populateSettings() {
            // Chat settings
            if (currentSettings.chatDelaySeconds !== undefined) {
                document.getElementById('chatDelaySeconds').value = currentSettings.chatDelaySeconds;
                document.getElementById('currentChatDelay').textContent = currentSettings.chatDelaySeconds;
            } else {
                document.getElementById('chatDelaySeconds').value = 5; // ค่าเริ่มต้น
                document.getElementById('currentChatDelay').textContent = 5; // ค่าเริ่มต้น
            }
            if (currentSettings.maxQueueMessages !== undefined) {
                document.getElementById('maxQueueMessages').value = currentSettings.maxQueueMessages;
                document.getElementById('currentMaxQueue').textContent = currentSettings.maxQueueMessages;
            } else {
                document.getElementById('maxQueueMessages').value = 10; // ค่าเริ่มต้น
                document.getElementById('currentMaxQueue').textContent = 10; // ค่าเริ่มต้น
            }
            if (currentSettings.enableMessageMerging !== undefined) {
                document.getElementById('enableMessageMerging').checked = currentSettings.enableMessageMerging;
            } else {
                document.getElementById('enableMessageMerging').checked = true; // ค่าเริ่มต้น
            }

            // AI settings
            if (currentSettings.textModel) {
                document.getElementById('textModel').value = currentSettings.textModel;
            } else {
                document.getElementById('textModel').value = 'gpt-5'; // ค่าเริ่มต้น
            }
            if (currentSettings.visionModel) {
                document.getElementById('visionModel').value = currentSettings.visionModel;
            } else {
                document.getElementById('visionModel').value = 'gpt-5'; // ค่าเริ่มต้น
            }

            if (currentSettings.maxImagesPerMessage !== undefined) {
                document.getElementById('maxImagesPerMessage').value = currentSettings.maxImagesPerMessage;
            } else {
                document.getElementById('maxImagesPerMessage').value = 3; // ค่าเริ่มต้น
            }

            // System settings
            if (currentSettings.aiEnabled !== undefined) {
                document.getElementById('aiEnabled').checked = currentSettings.aiEnabled;
            } else {
                document.getElementById('aiEnabled').checked = true; // ค่าเริ่มต้น
            }
            if (currentSettings.enableChatHistory !== undefined) {
                document.getElementById('enableChatHistory').checked = currentSettings.enableChatHistory;
            } else {
                document.getElementById('enableChatHistory').checked = true; // ค่าเริ่มต้น
            }
            if (currentSettings.enableAdminNotifications !== undefined) {
                document.getElementById('enableAdminNotifications').checked = currentSettings.enableAdminNotifications;
            } else {
                document.getElementById('enableAdminNotifications').checked = true; // ค่าเริ่มต้น
            }
            if (currentSettings.systemMode) {
                document.getElementById('systemMode').value = currentSettings.systemMode;
            } else {
                document.getElementById('systemMode').value = 'production'; // ค่าเริ่มต้น
            }

            // Filter settings
            if (currentSettings.enableMessageFiltering !== undefined) {
                document.getElementById('enableMessageFiltering').checked = currentSettings.enableMessageFiltering;
            } else {
                document.getElementById('enableMessageFiltering').checked = false; // ค่าเริ่มต้น
            }
            if (currentSettings.hiddenWords !== undefined) {
                document.getElementById('hiddenWords').value = currentSettings.hiddenWords;
            } else {
                document.getElementById('hiddenWords').value = ''; // ค่าเริ่มต้น
            }
            if (currentSettings.replacementText !== undefined) {
                document.getElementById('replacementText').value = currentSettings.replacementText;
            } else {
                document.getElementById('replacementText').value = ''; // ค่าเริ่มต้น
            }
            if (currentSettings.enableStrictFiltering !== undefined) {
                document.getElementById('enableStrictFiltering').checked = currentSettings.enableStrictFiltering;
            } else {
                document.getElementById('enableStrictFiltering').checked = false; // ค่าเริ่มต้น
            }
        }

        // Save chat settings
        async function saveChatSettings() {
            const settings = {
                chatDelaySeconds: parseInt(document.getElementById('chatDelaySeconds').value),
                maxQueueMessages: parseInt(document.getElementById('maxQueueMessages').value),
                enableMessageMerging: document.getElementById('enableMessageMerging').checked
            };

            try {
                const response = await fetch('/api/settings/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    showAlert('บันทึกการตั้งค่าแชทเรียบร้อยแล้ว', 'success');
                    await loadSettings(); // Reload settings
                } else {
                    showAlert('ไม่สามารถบันทึกการตั้งค่าแชทได้', 'danger');
                }
            } catch (error) {
                console.error('Error saving chat settings:', error);
                showAlert('เกิดข้อผิดพลาดในการบันทึกการตั้งค่า', 'danger');
            }
        }

        // Save AI settings
        async function saveAISettings() {
            const settings = {
                textModel: document.getElementById('textModel').value,
                visionModel: document.getElementById('visionModel').value,
                maxImagesPerMessage: parseInt(document.getElementById('maxImagesPerMessage').value)
            };

            try {
                const response = await fetch('/api/settings/ai', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    showAlert('บันทึกการตั้งค่า AI เรียบร้อยแล้ว', 'success');
                    await loadSettings(); // Reload settings
                } else {
                    showAlert('ไม่สามารถบันทึกการตั้งค่า AI ได้', 'danger');
                }
            } catch (error) {
                console.error('Error saving AI settings:', error);
                showAlert('เกิดข้อผิดพลาดในการบันทึกการตั้งค่า', 'danger');
            }
        }

        // Save system settings
        async function saveSystemSettings() {
            const settings = {
                aiEnabled: document.getElementById('aiEnabled').checked,
                enableChatHistory: document.getElementById('enableChatHistory').checked,
                enableAdminNotifications: document.getElementById('enableAdminNotifications').checked,
                systemMode: document.getElementById('systemMode').value
            };

            try {
                const response = await fetch('/api/settings/system', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    showAlert('บันทึกการตั้งค่าระบบเรียบร้อยแล้ว', 'success');
                    await loadSettings(); // Reload settings
                } else {
                    showAlert('ไม่สามารถบันทึกการตั้งค่าระบบได้', 'danger');
                }
            } catch (error) {
                console.error('Error saving system settings:', error);
                showAlert('เกิดข้อผิดพลาดในการบันทึกการตั้งค่า', 'danger');
            }
        }

        // Save filter settings
        async function saveFilterSettings() {
            const settings = {
                enableMessageFiltering: document.getElementById('enableMessageFiltering').checked,
                hiddenWords: document.getElementById('hiddenWords').value,
                replacementText: document.getElementById('replacementText').value || '[ข้อความถูกซ่อน]',
                enableStrictFiltering: document.getElementById('enableStrictFiltering').checked
            };

            try {
                const response = await fetch('/api/settings/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    showAlert('บันทึกการตั้งค่าการกรองเรียบร้อยแล้ว', 'success');
                    await loadSettings(); // Reload settings
                } else {
                    showAlert('ไม่สามารถบันทึกการตั้งค่าการกรองได้', 'danger');
                }
            } catch (error) {
                console.error('Error saving filter settings:', error);
                showAlert('เกิดข้อผิดพลาดในการบันทึกการตั้งค่า', 'danger');
            }
        }

        // Test filtering function
        async function testFiltering() {
            const testMessage = document.getElementById('testMessage').value;
            if (!testMessage.trim()) {
                showAlert('กรุณาใส่ข้อความที่ต้องการทดสอบ', 'warning');
                return;
            }

            try {
                const response = await fetch('/api/filter/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: testMessage })
                });

                if (response.ok) {
                    const result = await response.json();
                    const testResult = document.getElementById('testResult');
                    testResult.innerHTML = `
                        <strong>ผลการทดสอบ:</strong><br>
                        <strong>ข้อความต้นฉบับ:</strong> ${testMessage}<br>
                        <strong>ข้อความหลังกรอง:</strong> ${result.filteredMessage}<br>
                        <strong>คำที่ถูกซ่อน:</strong> ${result.hiddenWords.length > 0 ? result.hiddenWords.join(', ') : 'ไม่มี'}
                    `;
                    testResult.style.display = 'block';
                } else {
                    showAlert('ไม่สามารถทดสอบการกรองได้', 'danger');
                }
            } catch (error) {
                console.error('Error testing filter:', error);
                showAlert('เกิดข้อผิดพลาดในการทดสอบการกรอง', 'danger');
            }
        }

        // Show alert message
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertId = 'alert-' + Date.now();
            
            const alertHtml = `
                <div class="alert alert-${type} alert-custom alert-dismissible fade show" id="${alertId}" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            alertContainer.innerHTML = alertHtml;
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                const alert = document.getElementById(alertId);
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }
    </script>
</body>
</html>
