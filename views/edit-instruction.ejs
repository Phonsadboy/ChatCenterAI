<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แก้ไข Instruction - จัดการ AI</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        .page-header-actions .btn {
            min-width: 110px;
        }

        .instruction-meta dl {
            margin-bottom: 0;
        }

        .instruction-meta dt {
            font-weight: 600;
            color: var(--text-light);
        }

        .instruction-preview {
            min-height: 200px;
            background-color: var(--light-bg);
            border-radius: var(--border-radius);
            padding: 1rem;
        }

        .instruction-preview table {
            font-size: 0.875rem;
        }

        .instruction-preview .empty-preview {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
            height: 100%;
            text-align: center;
        }

        .table-builder-toolbar .btn {
            min-width: 120px;
        }

        .table-builder-wrapper {
            max-height: 360px;
            overflow: auto;
        }

        .table-builder-wrapper table {
            min-width: 480px;
        }

        .table-header-control {
            display: flex;
            align-items: center;
        }

        .table-header-input {
            min-width: 150px;
        }

        .table-cell-input {
            min-width: 150px;
        }

        .table-actions-col {
            width: 52px;
            min-width: 52px;
        }

        .instruction-drag-handle {
            display: inline-flex;
            align-items: center;
            color: var(--text-light);
        }

        .instruction-preview table thead th {
            background-color: rgba(104, 185, 132, 0.1);
        }

        @media (max-width: 991.98px) {
            .instruction-preview {
                min-height: 160px;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/admin-navbar', { activePage: 'dashboard' }) %>

    <div class="container-fluid mt-4">
        <div class="row g-2 align-items-center mb-3">
            <div class="col">
                <h2 class="mb-0">
                    <i class="fas fa-edit text-primary me-2"></i>
                    แก้ไข Instruction
                </h2>
                <small class="text-muted">
                    ปรับปรุงข้อมูลให้ตรงกับการตอบของ AI • อัปเดตจะมีผลทันทีหลังบันทึก
                </small>
            </div>
            <div class="col-auto page-header-actions d-flex gap-2">
                <a href="/admin/dashboard" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> กลับแดชบอร์ด
                </a>
            </div>
        </div>

        <div class="row g-4">
            <div class="col-lg-8">
                <form id="editInstructionForm" method="POST" action="/admin/instructions/<%= instruction._id %>/edit" class="needs-validation" novalidate>
                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-0">
                                        <i class="fas fa-pen-to-square me-2 text-primary"></i>
                                        รายละเอียดข้อมูล
                                    </h5>
                                </div>
                                <span class="badge bg-light text-dark">
                                    รหัส: <%= instruction._id %>
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label" for="instructionType">
                                    ประเภทข้อมูล
                                </label>
                                <select id="instructionType" name="type" class="form-select" required>
                                    <option value="text" <%= instruction.type === 'text' ? 'selected' : '' %>>ข้อความ</option>
                                    <option value="table" <%= instruction.type === 'table' ? 'selected' : '' %>>ตาราง</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label" for="instructionTitle">
                                    หัวข้อ (ไม่บังคับ)
                                </label>
                                <input
                                    type="text"
                                    class="form-control"
                                    id="instructionTitle"
                                    name="title"
                                    value="<%= instruction.title || '' %>"
                                    placeholder="เช่น ข้อมูลสินค้า / ขั้นตอนบริการ / โปรโมชั่นล่าสุด">
                                <div class="form-text">
                                    ข้อมูลส่วนนี้ช่วยให้ค้นหาและจัดหมวดหมู่ได้รวดเร็วขึ้น
                                </div>
                            </div>

                            <div id="textEditorSection" class="mb-3">
                                <label class="form-label" for="instructionContent">
                                    เนื้อหาข้อความ
                                </label>
                                <textarea
                                    class="form-control"
                                    id="instructionContent"
                                    name="content"
                                    rows="10"
                                    placeholder="กรอกข้อมูลที่ต้องการให้ AI ใช้ตอบกลับให้ลูกค้า"><%= instruction.content || '' %></textarea>
                                <div class="form-text d-flex justify-content-between">
                                    <span>
                                        <i class="fas fa-lightbulb me-1 text-warning"></i>
                                        เขียนให้กระชับและเข้าใจง่าย เพื่อให้ AI นำไปใช้ตอบได้แม่นยำ
                                    </span>
                                    <span id="contentCharCount">0</span>
                                </div>
                            </div>

                            <div id="tableEditorSection" class="mb-3" style="display: none;">
                                <div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-3">
                                    <div>
                                        <label class="form-label mb-0">
                                            ตั้งค่าตารางข้อมูล
                                        </label>
                                        <div class="form-text">
                                            เพิ่ม/ลบคอลัมน์และแถวตามโครงสร้างข้อมูลที่ต้องการ
                                        </div>
                                    </div>
                                    <div class="table-builder-toolbar btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary" id="addColumnBtn">
                                            <i class="fas fa-plus me-1"></i> เพิ่มคอลัมน์
                                        </button>
                                        <button type="button" class="btn btn-outline-primary" id="addRowBtn">
                                            <i class="fas fa-plus me-1"></i> เพิ่มแถว
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" id="clearTableBtn">
                                            <i class="fas fa-trash me-1"></i> ล้างตาราง
                                        </button>
                                    </div>
                                </div>

                                <div class="card border-0 shadow-sm table-builder-card">
                                    <div class="card-body">
                                        <div class="table-responsive table-builder-wrapper">
                                            <table class="table table-bordered table-sm align-middle" id="instructionTableBuilder">
                                                <thead class="table-light">
                                                    <tr id="tableHeaderRow"></tr>
                                                </thead>
                                                <tbody id="tableBodyRows"></tbody>
                                            </table>
                                        </div>
                                        <div class="text-muted small mt-2">
                                            ดับเบิลคลิกที่ชื่อคอลัมน์เพื่อแก้ไข • ใช้ปุ่ม Tab หรือปุ่มลูกศรเพื่อเลื่อนระหว่างเซลล์ • แถวว่างจะถูกตัดออกอัตโนมัติ
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" id="tableDataInput" name="tableData">
                            </div>

                            <div class="alert alert-light border mt-4 mb-0 small d-flex align-items-start gap-2">
                                <i class="fas fa-circle-info text-primary mt-1"></i>
                                <div>
                                    หากปรับโครงสร้างข้อมูลตาราง ระบบจะอัปเดตการตอบกลับของ AI ให้สอดคล้องกับคอลัมน์และแถวที่กำหนดใหม่โดยอัตโนมัติ
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <a href="/admin/dashboard" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i> ยกเลิก
                        </a>
                        <button type="submit" class="btn btn-primary" id="saveInstructionBtn">
                            <i class="fas fa-save me-1"></i> บันทึกการแก้ไข
                        </button>
                    </div>
                </form>
            </div>

            <div class="col-lg-4">
                <div class="card shadow-sm mb-3 instruction-meta">
                    <div class="card-header bg-white">
                        <h6 class="mb-0">
                            <i class="fas fa-circle-info me-2 text-primary"></i>
                            ข้อมูลอ้างอิง
                        </h6>
                    </div>
                    <div class="card-body">
                        <dl class="row g-2 mb-0">
                            <dt class="col-5">รหัส</dt>
                            <dd class="col-7 text-break"><%= instruction._id %></dd>

                            <dt class="col-5">ประเภท</dt>
                            <dd class="col-7" id="metaTypeLabel">
                                <%= instruction.type === 'text' ? 'ข้อความ' : 'ตาราง' %>
                            </dd>

                            <dt class="col-5">สร้างเมื่อ</dt>
                            <dd class="col-7">
                                <%= instruction.createdAt ? new Date(instruction.createdAt).toLocaleString('th-TH') : '-' %>
                            </dd>

                            <dt class="col-5">แก้ไขล่าสุด</dt>
                            <dd class="col-7" id="metaUpdatedAt">
                                <%= instruction.updatedAt ? new Date(instruction.updatedAt).toLocaleString('th-TH') : '-' %>
                            </dd>

                            <dt class="col-5">จำนวนข้อมูล</dt>
                            <dd class="col-7" id="metaDataCount">
                                <%= instruction.type === 'table' && instruction.data && Array.isArray(instruction.data.rows) ? `${instruction.data.rows.length} แถว` : `${(instruction.content || '').length} อักขระ` %>
                            </dd>
                        </dl>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="fas fa-eye me-2 text-primary"></i>
                            ตัวอย่างข้อมูล
                        </h6>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="refreshPreviewBtn">
                            <i class="fas fa-rotate-right me-1"></i> รีเฟรช
                        </button>
                    </div>
                    <div class="card-body instruction-preview" id="instructionPreview">
                        <div class="empty-preview">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p class="mb-0">แก้ไขข้อมูลด้านซ้ายเพื่อดูตัวอย่างแบบเรียลไทม์</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const initialInstruction = {
            id: '<%= instruction._id.toString() %>',
            type: '<%= instruction.type %>',
            title: <%- JSON.stringify(instruction.title || '') %>,
            content: <%- JSON.stringify(instruction.content || '') %>,
            data: <%- JSON.stringify(instruction.data || null) %>,
            createdAt: '<%= instruction.createdAt ? new Date(instruction.createdAt).toISOString() : '' %>',
            updatedAt: '<%= instruction.updatedAt ? new Date(instruction.updatedAt).toISOString() : '' %>'
        };

        const instructionTableBuilder = (() => {
            let isInitialized = false;
            let columns = ['คอลัมน์ 1', 'คอลัมน์ 2'];
            let rows = [
                ['', ''],
                ['', ''],
                ['', '']
            ];

            const refs = {
                headerRow: null,
                bodyRows: null,
                addColumnBtn: null,
                addRowBtn: null,
                clearBtn: null,
                hiddenInput: null
            };

            const escapeHtml = (value) => {
                if (value === null || value === undefined) return '';
                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            };

            const ensureColumnDefaults = () => {
                columns = columns.map((col, index) => {
                    const name = (col || '').trim();
                    return name || `คอลัมน์ ${index + 1}`;
                });
            };

            const ensureRowWidths = () => {
                rows = rows.map(row => {
                    const nextRow = Array.isArray(row) ? [...row] : [];
                    while (nextRow.length < columns.length) {
                        nextRow.push('');
                    }
                    if (nextRow.length > columns.length) {
                        nextRow.length = columns.length;
                    }
                    return nextRow;
                });
            };

            const renderHeader = () => {
                if (!refs.headerRow) return;
                ensureColumnDefaults();
                refs.headerRow.innerHTML = columns.map((columnName, index) => `
                    <th scope="col">
                        <div class="table-header-control">
                            <input
                                type="text"
                                class="form-control form-control-sm table-header-input"
                                value="${escapeHtml(columnName)}"
                                data-col-index="${index}"
                                aria-label="ชื่อคอลัมน์ที่ ${index + 1}">
                            ${columns.length > 1 ? `
                                <button type="button" class="btn btn-link btn-sm text-danger p-0 ms-1 remove-column-btn" data-remove-column="${index}" title="ลบคอลัมน์นี้">
                                    <i class="fas fa-times-circle"></i>
                                </button>
                            ` : ''}
                        </div>
                    </th>
                `).join('') + `
                    <th scope="col" class="text-center table-actions-col">
                        <i class="fas fa-ellipsis-h text-muted"></i>
                    </th>
                `;

                refs.headerRow.querySelectorAll('.table-header-input').forEach(input => {
                    input.addEventListener('input', event => {
                        const colIndex = Number(event.target.getAttribute('data-col-index'));
                        if (Number.isInteger(colIndex) && colIndex >= 0 && colIndex < columns.length) {
                            columns[colIndex] = event.target.value;
                        }
                        updatePreview();
                    });
                });

                refs.headerRow.querySelectorAll('.remove-column-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const colIndex = Number(btn.getAttribute('data-remove-column'));
                        if (!Number.isInteger(colIndex)) return;
                        if (columns.length <= 1) {
                            showAlert('ต้องมีคอลัมน์อย่างน้อย 1 คอลัมน์', 'warning');
                            return;
                        }
                        columns.splice(colIndex, 1);
                        rows.forEach(row => row.splice(colIndex, 1));
                        render();
                        updatePreview();
                    });
                });
            };

            const renderBody = () => {
                if (!refs.bodyRows) return;
                ensureRowWidths();
                refs.bodyRows.innerHTML = rows.map((row, rowIndex) => `
                    <tr data-row-index="${rowIndex}">
                        ${row.map((cellValue, colIndex) => `
                            <td>
                                <input
                                    type="text"
                                    class="form-control form-control-sm table-cell-input"
                                    value="${escapeHtml(cellValue)}"
                                    data-row-index="${rowIndex}"
                                    data-col-index="${colIndex}">
                            </td>
                        `).join('')}
                        <td class="text-center">
                            <button type="button" class="btn btn-link text-danger btn-sm remove-row-btn" data-remove-row="${rowIndex}" title="ลบแถวนี้">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');

                refs.bodyRows.querySelectorAll('.table-cell-input').forEach(input => {
                    input.addEventListener('input', event => {
                        const rowIndex = Number(event.target.getAttribute('data-row-index'));
                        const colIndex = Number(event.target.getAttribute('data-col-index'));
                        if (!Number.isInteger(rowIndex) || !Number.isInteger(colIndex)) return;
                        if (!rows[rowIndex]) rows[rowIndex] = [];
                        rows[rowIndex][colIndex] = event.target.value;
                        updatePreview();
                    });
                });

                refs.bodyRows.querySelectorAll('.remove-row-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const rowIndex = Number(btn.getAttribute('data-remove-row'));
                        if (!Number.isInteger(rowIndex)) return;
                        if (rows.length <= 1) {
                            rows[0] = new Array(columns.length).fill('');
                        } else {
                            rows.splice(rowIndex, 1);
                        }
                        render();
                        updatePreview();
                    });
                });
            };

            const render = () => {
                renderHeader();
                renderBody();
            };

            const addColumn = () => {
                columns.push(`คอลัมน์ ${columns.length + 1}`);
                rows.forEach(row => row.push(''));
                render();
                updatePreview();
            };

            const addRow = () => {
                const newRow = new Array(columns.length).fill('');
                rows.push(newRow);
                render();
                setTimeout(() => {
                    const lastInput = refs.bodyRows?.querySelector('tr:last-child input.table-cell-input');
                    if (lastInput) lastInput.focus();
                }, 0);
                updatePreview();
            };

            const clear = () => {
                columns = ['คอลัมน์ 1', 'คอลัมน์ 2'];
                rows = [
                    ['', ''],
                    ['', ''],
                    ['', '']
                ];
                render();
                updatePreview();
                if (refs.hiddenInput) {
                    refs.hiddenInput.value = '';
                }
            };

            const sanitizeRows = (dataRows) => {
                if (!Array.isArray(dataRows)) return [];
                return dataRows
                    .map(row => {
                        if (!Array.isArray(row)) return new Array(columns.length).fill('');
                        const normalized = row.map(cell => String(cell ?? '').trim());
                        while (normalized.length < columns.length) {
                            normalized.push('');
                        }
                        if (normalized.length > columns.length) {
                            normalized.length = columns.length;
                        }
                        return normalized;
                    })
                    .filter(row => row.some(cell => cell !== ''));
            };

            const getPayload = () => {
                ensureColumnDefaults();
                ensureRowWidths();
                const sanitizedColumns = columns.map(col => col.trim());
                const sanitizedRows = sanitizeRows(rows);
                return {
                    columns: sanitizedColumns,
                    rows: sanitizedRows
                };
            };

            const commit = () => {
                if (!refs.hiddenInput) return { success: false, message: 'ไม่พบข้อมูลตาราง' };
                const payload = getPayload();

                const hasColumn = payload.columns.some(col => col !== '');
                if (!hasColumn) {
                    return { success: false, message: 'กรุณาตั้งชื่อคอลัมน์อย่างน้อย 1 คอลัมน์' };
                }

                refs.hiddenInput.value = JSON.stringify(payload);
                return { success: true, payload };
            };

            const populate = (data) => {
                if (!data || typeof data !== 'object') {
                    clear();
                    return;
                }

                if (Array.isArray(data.columns) && data.columns.length) {
                    columns = data.columns.map(col => String(col || ''));
                } else {
                    columns = ['คอลัมน์ 1', 'คอลัมน์ 2'];
                }

                if (Array.isArray(data.rows) && data.rows.length) {
                    rows = data.rows.map(row => {
                        if (Array.isArray(row)) {
                            return row.map(cell => String(cell ?? ''));
                        }
                        if (row && typeof row === 'object') {
                            return columns.map(col => String(row[col] ?? ''));
                        }
                        return new Array(columns.length).fill('');
                    });
                } else {
                    rows = [new Array(columns.length).fill('')];
                }

                ensureColumnDefaults();
                ensureRowWidths();
                render();
                updatePreview();
            };

            return {
                init() {
                    refs.headerRow = document.getElementById('tableHeaderRow');
                    refs.bodyRows = document.getElementById('tableBodyRows');
                    refs.addColumnBtn = document.getElementById('addColumnBtn');
                    refs.addRowBtn = document.getElementById('addRowBtn');
                    refs.clearBtn = document.getElementById('clearTableBtn');
                    refs.hiddenInput = document.getElementById('tableDataInput');

                    if (!refs.headerRow || !refs.bodyRows) {
                        return;
                    }

                    if (!isInitialized) {
                        if (refs.addColumnBtn) {
                            refs.addColumnBtn.addEventListener('click', addColumn);
                        }
                        if (refs.addRowBtn) {
                            refs.addRowBtn.addEventListener('click', addRow);
                        }
                        if (refs.clearBtn) {
                            refs.clearBtn.addEventListener('click', () => {
                                if (confirm('ต้องการล้างข้อมูลตารางทั้งหมดหรือไม่?')) {
                                    clear();
                                }
                            });
                        }
                        isInitialized = true;
                    }

                    render();
                    updatePreview();
                },
                reset() {
                    clear();
                },
                populateFromExisting(data) {
                    populate(data);
                },
                commitToHiddenInput() {
                    return commit();
                },
                getPayload() {
                    return getPayload();
                }
            };
        })();

        function showAlert(message, type = 'info') {
            const existingToast = document.querySelector('.notification-toast');
            if (existingToast) existingToast.remove();

            const toast = document.createElement('div');
            toast.className = `notification-toast alert alert-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
            toast.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 1055;
                max-width: 360px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            `;
            toast.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'warning' ? 'fa-exclamation-triangle' : type === 'error' ? 'fa-times-circle' : 'fa-info-circle'} me-2"></i>
                    <span>${message}</span>
                    <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.classList.remove('show');
                toast.classList.add('hide');
                setTimeout(() => toast.remove(), 200);
            }, 4000);
        }

        function formatDateTime(value) {
            if (!value) return '-';
            try {
                return new Date(value).toLocaleString('th-TH');
            } catch (_) {
                return '-';
            }
        }

        function escapeHtml(value) {
            if (value === null || value === undefined) return '';
            const div = document.createElement('div');
            div.textContent = value;
            return div.innerHTML;
        }

        function renderTextPreview(text) {
            const preview = document.getElementById('instructionPreview');
            const safeText = escapeHtml(text || '').trim();
            if (!safeText) {
                preview.innerHTML = `
                    <div class="empty-preview">
                        <i class="fas fa-align-left fa-2x mb-2"></i>
                        <p class="mb-0">ยังไม่มีเนื้อหา ลองกรอกข้อมูลด้านซ้ายเพื่อดูตัวอย่าง</p>
                    </div>
                `;
                return;
            }
            preview.innerHTML = `
                <div class="text-break" style="white-space: pre-wrap;">${safeText}</div>
            `;
        }

        function renderTablePreview(payload) {
            const preview = document.getElementById('instructionPreview');
            if (!payload || !Array.isArray(payload.columns) || payload.columns.length === 0) {
                preview.innerHTML = `
                    <div class="empty-preview">
                        <i class="fas fa-table fa-2x mb-2"></i>
                        <p class="mb-0">ยังไม่มีโครงสร้างตาราง กำหนดคอลัมน์เพื่อเริ่มต้น</p>
                    </div>
                `;
                return;
            }

            const hasData = Array.isArray(payload.rows) && payload.rows.length > 0;
            const rowsHtml = hasData
                ? payload.rows.slice(0, 10).map(row => `
                    <tr>
                        ${row.map(cell => `
                            <td>${escapeHtml(cell || '')}</td>
                        `).join('')}
                    </tr>
                `).join('')
                : `
                    <tr>
                        <td colspan="${payload.columns.length}" class="text-center text-muted">
                            ยังไม่มีข้อมูลในตาราง
                        </td>
                    </tr>
                `;

            preview.innerHTML = `
                <div class="table-responsive">
                    <table class="table table-sm table-bordered mb-0">
                        <thead class="table-light">
                            <tr>
                                ${payload.columns.map(col => `<th>${escapeHtml(col)}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody>
                            ${rowsHtml}
                        </tbody>
                    </table>
                </div>
                ${hasData && payload.rows.length > 10 ? `
                    <div class="text-muted small mt-2">
                        แสดงเพียง 10 แถวแรก • ทั้งหมด ${payload.rows.length} แถว
                    </div>
                ` : ''}
            `;
        }

        function updateSidebarMeta() {
            const metaTypeLabel = document.getElementById('metaTypeLabel');
            const metaDataCount = document.getElementById('metaDataCount');
            const type = document.getElementById('instructionType').value;

            if (metaTypeLabel) {
                metaTypeLabel.textContent = type === 'table' ? 'ตาราง' : 'ข้อความ';
            }

            if (metaDataCount) {
                if (type === 'table') {
                    const payload = instructionTableBuilder.getPayload();
                    const rowCount = Array.isArray(payload.rows) ? payload.rows.length : 0;
                    metaDataCount.textContent = `${rowCount} แถว`;
                } else {
                    const text = document.getElementById('instructionContent').value || '';
                    metaDataCount.textContent = `${text.length} อักขระ`;
                }
            }
        }

        function updatePreview() {
            const type = document.getElementById('instructionType').value;
            if (type === 'table') {
                const payload = instructionTableBuilder.getPayload();
                renderTablePreview(payload);
            } else {
                const text = document.getElementById('instructionContent').value || '';
                renderTextPreview(text);
            }
            updateSidebarMeta();
        }

        function updateCharCount() {
            const counter = document.getElementById('contentCharCount');
            if (!counter) return;
            const value = document.getElementById('instructionContent').value || '';
            counter.textContent = `${value.length} อักขระ`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            const typeSelect = document.getElementById('instructionType');
            const textSection = document.getElementById('textEditorSection');
            const tableSection = document.getElementById('tableEditorSection');
            const contentInput = document.getElementById('instructionContent');
            const titleInput = document.getElementById('instructionTitle');
            const refreshPreviewBtn = document.getElementById('refreshPreviewBtn');

            const toggleEditorSection = () => {
                const type = typeSelect.value;
                if (type === 'table') {
                    textSection.style.display = 'none';
                    tableSection.style.display = '';
                    instructionTableBuilder.init();
                    updatePreview();
                } else {
                    textSection.style.display = '';
                    tableSection.style.display = 'none';
                    updatePreview();
                }
            };

            instructionTableBuilder.init();

            if (initialInstruction.type === 'table' && initialInstruction.data) {
                instructionTableBuilder.populateFromExisting(initialInstruction.data);
            }

            toggleEditorSection();
            updateCharCount();
            updatePreview();

            typeSelect.addEventListener('change', () => {
                toggleEditorSection();
                updatePreview();
            });

            contentInput.addEventListener('input', () => {
                updateCharCount();
                updatePreview();
            });

            titleInput.addEventListener('input', () => {
                const metaUpdated = document.getElementById('metaUpdatedAt');
                if (metaUpdated && !initialInstruction.updatedAt) {
                    metaUpdated.textContent = formatDateTime(new Date().toISOString());
                }
            });

            refreshPreviewBtn.addEventListener('click', updatePreview);

            document.getElementById('editInstructionForm').addEventListener('submit', async (event) => {
                const type = typeSelect.value;
                if (type === 'table') {
                    const result = instructionTableBuilder.commitToHiddenInput();
                    if (!result.success) {
                        event.preventDefault();
                        showAlert(result.message || 'ไม่สามารถบันทึกข้อมูลตารางได้', 'warning');
                        return false;
                    }
                    if (contentInput) {
                        contentInput.value = '';
                    }
                } else {
                    const hidden = document.getElementById('tableDataInput');
                    if (hidden) {
                        hidden.value = '';
                    }
                }
                return true;
            });
        });
    </script>
</body>
</html>
