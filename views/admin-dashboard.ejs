<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แดชบอร์ด | จัดการ AI</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body>
    <%- include('partials/admin-navbar', { activePage: 'dashboard' }) %>

    <div class="container mt-4">
        <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle me-2"></i> <%= error %>
            </div>
        <% } %>

        <%
            const totalInstructions = Array.isArray(instructions) ? instructions.length : 0;
            let textInstructions = 0;
            let tableInstructions = 0;
            if (Array.isArray(instructions)) {
                instructions.forEach(item => {
                    if (item.type === 'table') {
                        tableInstructions += 1;
                    } else {
                        textInstructions += 1;
                    }
                });
            }
            const aiStatusLabel = aiEnabled ? 'เปิดใช้งาน' : 'ปิดใช้งาน';
            const aiStatusDescription = aiEnabled
                ? 'AI กำลังช่วยตอบลูกค้าทุกช่องทาง'
                : 'เปิด AI เพื่อให้ระบบตอบลูกค้าอัตโนมัติ';
        %>

        <section class="dashboard-metrics mb-4">
            <article class="dashboard-metric-card">
                <div class="dashboard-metric-icon icon-success">
                    <i class="fas fa-power-off"></i>
                </div>
                <div class="dashboard-metric-content">
                    <p class="metric-label">สถานะ AI</p>
                    <p class="metric-value <%= aiEnabled ? 'text-success' : 'text-danger' %>"><%= aiStatusLabel %></p>
                    <small class="metric-meta"><%= aiStatusDescription %></small>
                </div>
            </article>
            <article class="dashboard-metric-card">
                <div class="dashboard-metric-icon icon-info">
                    <i class="fas fa-book-open"></i>
                </div>
                <div class="dashboard-metric-content">
                    <p class="metric-label">Instruction ในระบบ</p>
                    <p class="metric-value"><%= totalInstructions %></p>
                    <small class="metric-meta">ข้อความ <%= textInstructions %> • ตาราง <%= tableInstructions %></small>
                </div>
            </article>
            <article class="dashboard-metric-card">
                <div class="dashboard-metric-icon icon-warning">
                    <i class="fas fa-bolt"></i>
                </div>
                <div class="dashboard-metric-content">
                    <p class="metric-label">ตั้งค่าให้พร้อม</p>
                    <p class="metric-value text-primary">เริ่มต้นรวดเร็ว</p>
                    <div class="metric-actions">
                        <a class="btn btn-sm btn-outline-primary" href="/admin/settings#line-tab">
                            <i class="fas fa-sliders-h me-1"></i> จัดการโมเดล
                        </a>
                        <a class="btn btn-sm btn-outline-secondary" href="/admin/followup">
                            <i class="fas fa-user-clock me-1"></i> ตรวจงานติดตาม
                        </a>
                    </div>
                </div>
            </article>
        </section>
        <div class="row mb-4">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-book"></i> ข้อมูล
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <div class="d-flex justify-content-between mb-3">
                                <h5 class="mb-0">สถานะ AI</h5>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="toggleAI" <%= aiEnabled ? 'checked' : '' %>>
                                    <label class="form-check-label" for="toggleAI">
                                        <span id="statusLabel" class="<%= aiEnabled ? 'text-success' : 'text-danger' %>">
                                            <%= aiEnabled ? 'เปิดใช้งาน' : 'ปิดใช้งาน' %>
                                        </span>
                                    </label>
                                </div>
                            </div>
                            <div class="bg-light-info rounded p-3">
                                <p class="mb-0"><i class="fas fa-info-circle me-2"></i> สถานะนี้ควบคุมการทำงานของ AI ในระบบทั้งหมด คลิกสวิตช์เพื่อเปิด/ปิดการทำงาน</p>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-4">
                            <h5>จัดการ AI</h5>
                            <div>
                                <button class="btn btn-primary btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#addInstructionModal">
                                    <i class="fas fa-plus"></i> เพิ่มข้อมูล
                                </button>
                                <button class="btn btn-success btn-sm ms-2" type="button" data-bs-toggle="modal" data-bs-target="#uploadExcelModal">
                                    <i class="fas fa-file-excel"></i> อัพโหลด Excel
                                </button>
                                <button class="btn btn-warning btn-sm ms-2" type="button" data-bs-toggle="modal" data-bs-target="#backupModal">
                                    <i class="fas fa-book"></i> Instruction Library
                                </button>
                                <button class="btn btn-outline-primary btn-sm ms-2" id="previewBtn">
                                    <i class="fas fa-eye"></i> Preview
                                </button>
                                <div class="btn-group btn-group-sm ms-2" role="group">
                                    <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-download"></i> ดาวน์โหลด
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <a class="dropdown-item" href="/admin/instructions/export/excel">
                                                <i class="fas fa-file-excel me-2 text-success"></i>Excel (เต็ม)
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="/admin/instructions/export/json">
                                                <i class="fas fa-file-code me-2 text-primary"></i>JSON (เต็ม)
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="/admin/instructions/export/markdown">
                                                <i class="fas fa-file-lines me-2 text-warning"></i>Markdown (เต็ม)
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        
                        <div id="instructionsList" class="mt-3">
                            <div class="row g-2 align-items-center mb-3" id="instructionFilters">
                                <div class="col-12 col-lg-6">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text bg-white">
                                            <i class="fas fa-search"></i>
                                        </span>
                                        <input type="search" class="form-control" id="instructionSearchInput" placeholder="ค้นหาจากหัวข้อหรือเนื้อหา...">
                                    </div>
                                </div>
                                <div class="col-12 col-sm-6 col-lg-3">
                                    <select class="form-select form-select-sm" id="instructionTypeFilter">
                                        <option value="all">ประเภททั้งหมด</option>
                                        <option value="text">เฉพาะข้อความ</option>
                                        <option value="table">เฉพาะตาราง</option>
                                    </select>
                                </div>
                            </div>
                            <div id="instructionItems">
                                <% if (instructions.length === 0) { %>
                                    <div class="text-center py-4 bg-light rounded">
                                        <i class="fas fa-file-alt text-muted fs-3 mb-2"></i>
                                        <p class="text-muted mb-0">ยังไม่มีข้อมูลคำแนะนำ</p>
                                    </div>
                                <% } else { %>
                                    <% instructions.forEach(instruction => { %>
                                        <div class="instruction-item" data-id="<%= instruction._id %>">
                                            <div class="d-flex align-items-start justify-content-between gap-3">
                                                <div class="d-flex align-items-start gap-2 flex-grow-1">
                                                    <span class="instruction-drag-handle" aria-hidden="true">
                                                        <i class="fas fa-grip-vertical"></i>
                                                    </span>
                                                    <div>
                                                        <span class="instruction-type <%= instruction.type === 'text' ? 'type-text' : 'type-table' %>">
                                                            <%= instruction.type === 'text' ? 'ข้อความ' : 'ตาราง' %>
                                                        </span>
                                                        <h6 class="mt-2 mb-0"><%= instruction.title || 'ไม่มีหัวข้อ' %></h6>
                                                    </div>
                                                </div>
                                                <div class="btn-group">
                                                    <a href="/admin/instructions/<%= instruction._id %>/edit" class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <% if (instruction.type === 'table') { %>
                                                        <button class="btn btn-sm btn-outline-info view-json" data-id="<%= instruction._id %>">
                                                            <i class="fas fa-code"></i>
                                                        </button>
                                                    <% } %>
                                                    <button class="btn btn-sm btn-outline-danger delete-instruction" data-id="<%= instruction._id %>">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary move-instruction" data-id="<%= instruction._id %>" data-direction="up">
                                                        <i class="fas fa-arrow-up"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary move-instruction" data-id="<%= instruction._id %>" data-direction="down">
                                                        <i class="fas fa-arrow-down"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <% if (instruction.type === 'text' && instruction.content) { %>
                                                <div class="mt-2 text-muted small">
                                                    <%= instruction.content.length > 150 ? instruction.content.substring(0, 150) + '...' : instruction.content %>
                                                </div>
                                            <% } else if (instruction.type === 'table') { %>
                                                <div class="mt-2 bg-light-info p-2 rounded">
                                                    <small class="text-info">
                                                        <i class="fas fa-table me-1"></i> ข้อมูลตาราง - คลิกปุ่ม <i class="fas fa-code"></i> เพื่อดู JSON
                                                    </small>
                                                </div>
                                            <% } %>
                                        </div>
                                    <% }) %>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-tools"></i> เครื่องมือที่เกี่ยวข้อง
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <a href="/admin/followup" class="btn btn-outline-primary">
                                <i class="fas fa-user-clock me-2"></i> จัดการระบบติดตาม
                            </a>
                            <a href="/admin/broadcast" class="btn btn-outline-primary">
                                <i class="fas fa-bullhorn me-2"></i> ส่งข้อความบรอดแคสต์
                            </a>
                            <a href="/admin/followup" class="btn btn-outline-primary">
                                <i class="fas fa-chart-line me-2"></i> ภาพรวมสถานะติดตาม
                            </a>
                        </div>
                        
                        <div class="mt-4">
                            <h6 class="mb-3">คำสั่งพิเศษสำหรับลูกค้า</h6>
                            <div class="bg-light p-3 rounded">
                                <div class="mb-2">
                                    <code>#DELETEMANY</code> - ลบข้อมูลทั้งหมดของผู้ใช้
                                </div>
                            </div>
                        </div>
                        
                        <!-- คำสั่งสำหรับแอดมิน (ยกเลิกการใช้งานจริง) -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Add Instruction -->
    <div class="modal fade" id="addInstructionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">เพิ่มข้อมูลคำแนะนำ</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="instructionForm" action="/admin/instructions" method="POST">
                        <div class="mb-3">
                            <label class="form-label">ประเภทข้อมูล</label>
                            <select id="typeSelect" name="type" class="form-select">
                                <option value="text">ข้อความ</option>
                                <option value="table">ตาราง</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">หัวข้อ (ถ้ามี)</label>
                            <input type="text" name="title" class="form-control" placeholder="ระบุหัวข้อของข้อมูล">
                        </div>
                        
                        <div id="textEditor">
                            <div class="mb-3">
                                <label class="form-label">เนื้อหา</label>
                                <textarea name="content" rows="8" class="form-control" 
                                    placeholder="ใส่เนื้อหาข้อความที่จะให้ AI รับรู้"></textarea>
                            </div>
                        </div>
                        
                        <div id="tableEditor" style="display: none;">
                            <div class="mb-3">
                                <label class="form-label">คอลัมน์และข้อมูลตาราง</label>
                                <div class="card border-0 shadow-sm table-builder-card">
                                    <div class="card-body">
                                        <div class="d-flex flex-wrap gap-2 mb-3">
                                            <button type="button" class="btn btn-outline-primary btn-sm" id="addColumnBtn">
                                                <i class="fas fa-plus me-1"></i> เพิ่มคอลัมน์
                                            </button>
                                            <button type="button" class="btn btn-outline-primary btn-sm" id="addRowBtn">
                                                <i class="fas fa-plus me-1"></i> เพิ่มแถว
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm" id="clearTableBtn">
                                                <i class="fas fa-eraser me-1"></i> ล้างข้อมูล
                                            </button>
                                        </div>
                                        <div class="table-responsive table-builder-wrapper">
                                            <table class="table table-bordered table-sm align-middle" id="instructionTableBuilder">
                                                <thead class="table-light">
                                                    <tr id="tableHeaderRow"></tr>
                                                </thead>
                                                <tbody id="tableBodyRows"></tbody>
                                            </table>
                                        </div>
                                        <div class="text-muted small mt-2">
                                            ดับเบิลคลิกหัวคอลัมน์เพื่อแก้ไขชื่อ • กด Enter เพื่อเพิ่มบรรทัดใหม่ในช่อง • ใช้ปุ่มลูกศรหรือ Tab เพื่อเลื่อนระหว่างเซลล์
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" name="tableData" id="tableDataInput">
                            </div>
                        </div>
                        
                        <div class="text-end">
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">ยกเลิก</button>
                            <button type="submit" class="btn btn-primary">บันทึก</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Preview -->
    <div class="modal fade" id="previewModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-eye me-2"></i> ตัวอย่างคำแนะนำที่ AI จะได้รับ
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="previewContent" class="bg-light p-3 rounded">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">กำลังโหลดตัวอย่าง...</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">ปิด</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal JSON View -->
    <div class="modal fade" id="jsonModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-code me-2"></i> <span id="jsonTitle">ข้อมูลตาราง</span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="jsonContent" class="bg-light p-3 rounded"></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">ปิด</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Delete Confirmation -->
    <div class="modal fade" id="deleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ยืนยันการลบ</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>คุณต้องการลบข้อมูลนี้ใช่หรือไม่?</p>
                    <p class="text-danger">การลบจะไม่สามารถกู้คืนได้</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">ยกเลิก</button>
                    <form id="deleteForm" method="POST" action="">
                        <button type="submit" class="btn btn-danger">ลบข้อมูล</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Upload Excel -->
    <div class="modal fade" id="uploadExcelModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-file-excel me-2"></i> อัพโหลดไฟล์ Excel
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>คำแนะนำ:</strong> แต่ละแท็บในไฟล์ Excel จะกลายเป็น 1 instruction
                        <ul class="mb-0 mt-2">
                            <li>แท็บที่มีหลายแถว = ตาราง instruction</li>
                            <li>แท็บที่มี 1 แถว = ข้อความ instruction</li>
                            <li>ชื่อแท็บจะเป็นหัวข้อของ instruction</li>
                        </ul>
                    </div>

                    <form id="excelUploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label class="form-label">เลือกไฟล์ Excel (.xlsx หรือ .xls)</label>
                            <input type="file" id="excelFileInput" name="excelFile" class="form-control" 
                                   accept=".xlsx,.xls" required>
                            <div class="form-text">
                                ขนาดไฟล์ไม่เกิน 10MB
                            </div>
                        </div>

                        <div id="uploadProgress" class="mb-3" style="display: none;">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                            <small class="text-muted">กำลังประมวลผล...</small>
                        </div>

                        <div id="previewSection" class="mb-3" style="display: none;">
                            <h6>ตัวอย่างข้อมูลที่จะถูกสร้าง:</h6>
                            <div id="previewContent" class="bg-light p-3 rounded max-height-300 overflow-auto">
                                <!-- Preview content will be inserted here -->
                            </div>
                        </div>

                        <div class="text-end">
                            <button type="button" class="btn btn-outline-secondary" id="previewExcelBtn">
                                <i class="fas fa-eye"></i> ดูตัวอย่าง
                            </button>
                            <button type="button" class="btn btn-light ms-2" data-bs-dismiss="modal">ยกเลิก</button>
                            <button type="submit" class="btn btn-success ms-2" id="uploadExcelBtn" disabled>
                                <i class="fas fa-upload"></i> อัพโหลดและบันทึก
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Backup & Restore -->
    <div class="modal fade" id="backupModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-book me-2"></i> จัดการ Instruction Library
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- สร้าง Backup ใหม่ -->
                    <div class="card mb-3">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="fas fa-save me-2"></i> สร้าง Instruction Library ใหม่
                            </h6>
                            <p class="text-muted small">บันทึก instructions ปัจจุบันทั้งหมดลงคลัง</p>
                            <button class="btn btn-primary" id="createLibraryBtn">
                                <i class="fas fa-plus-circle me-2"></i> สร้าง Library
                            </button>
                        </div>
                    </div>

                    <!-- รายการ Backup ที่มีอยู่ -->
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="fas fa-list me-2"></i> รายการ Instruction Library
                            </h6>
                            <div id="libraryList" class="mt-3">
                                <div class="text-center py-3">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">กำลังโหลด...</span>
                                    </div>
                                    <p class="text-muted small mt-2">กำลังโหลดรายการ library...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Assign Library To Bots -->
    <div class="modal fade" id="assignLibraryModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="assignLibraryTitle">
                        <i class="fas fa-check-double me-2"></i> เลือกใช้คลังกับเพจ
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted small">
                        เลือกเพจที่จะใช้คลังนี้ ระบบจะไม่ลบข้อมูลเล่มใด ๆ เพียงเพิ่ม/ลดการเลือกใช้ของแต่ละเพจเท่านั้น
                    </p>
                    <div class="row g-4">
                        <div class="col-md-6">
                            <h6><i class="fab fa-line text-success me-2"></i>Line Bots</h6>
                            <div id="assignLineBotList" class="border rounded p-3" style="max-height: 320px; overflow-y: auto;">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fab fa-facebook text-primary me-2"></i>Facebook Bots</h6>
                            <div id="assignFacebookBotList" class="border rounded p-3" style="max-height: 320px; overflow-y: auto;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                    <button type="button" class="btn btn-primary" id="confirmAssignLibraryBtn">
                        <i class="fas fa-save me-2"></i> บันทึกการเลือกใช้
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Restore Confirmation -->
    <div class="modal fade" id="restoreConfirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i> ยืนยันการคืนค่า
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>คุณกำลังจะคืนค่า instructions จาก library</strong></p>
                    <p class="text-danger">การดำเนินการนี้จะ:</p>
                    <ul class="text-danger">
                        <li>ลบ instructions ปัจจุบันทั้งหมด</li>
                        <li>นำเข้า instructions จาก library ที่เลือก</li>
                    </ul>
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="createBackupBeforeRestore">
                        <label class="form-check-label" for="createBackupBeforeRestore">
                            บันทึกข้อมูลปัจจุบันลงคลังก่อนคืนค่า
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                    <button type="button" class="btn btn-warning" id="confirmRestoreBtn">
                        <i class="fas fa-undo me-2"></i> ยืนยันการคืนค่า
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ===== NOTIFICATION SYSTEM =====
        function showNotification(message, type = 'info', duration = 5000) {
            // ลบ notification เก่าก่อน
            const existingNotification = document.querySelector('.notification-toast');
            if (existingNotification) {
                existingNotification.remove();
            }

            // สร้าง notification ใหม่
            const notification = document.createElement('div');
            notification.className = `notification-toast alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
            notification.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 400px;
                min-width: 300px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideInRight 0.3s ease-out;
            `;

            const icon = type === 'error' ? 'fas fa-exclamation-circle' : 
                        type === 'success' ? 'fas fa-check-circle' : 
                        'fas fa-info-circle';

            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="${icon} me-2"></i>
                    <span>${message}</span>
                    <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            document.body.appendChild(notification);

            // Auto remove หลังจากเวลาที่กำหนด
            if (duration > 0) {
                setTimeout(() => {
                    if (notification && notification.parentNode) {
                        notification.classList.add('fade');
                        setTimeout(() => {
                            if (notification.parentNode) {
                                notification.remove();
                            }
                        }, 300);
                    }
                }, duration);
            }

            return notification;
        }

        function setupInstructionDragAndDrop() {
            const items = document.querySelectorAll('.instruction-item');
            const canDrag = instructionFilterState.search.trim() === ''
                && instructionFilterState.type === 'all';

            items.forEach(item => {
                item.classList.remove('dragging', 'drag-over');
                item.removeEventListener('dragstart', handleInstructionDragStart);
                item.removeEventListener('dragover', handleInstructionDragOver);
                item.removeEventListener('dragleave', handleInstructionDragLeave);
                item.removeEventListener('drop', handleInstructionDrop);
                item.removeEventListener('dragend', handleInstructionDragEnd);

                if (canDrag) {
                    item.setAttribute('draggable', 'true');
                    item.removeAttribute('aria-disabled');
                    item.removeAttribute('title');
                    item.addEventListener('dragstart', handleInstructionDragStart);
                    item.addEventListener('dragover', handleInstructionDragOver);
                    item.addEventListener('dragleave', handleInstructionDragLeave);
                    item.addEventListener('drop', handleInstructionDrop);
                    item.addEventListener('dragend', handleInstructionDragEnd);
                } else {
                    item.setAttribute('draggable', 'false');
                    item.setAttribute('aria-disabled', 'true');
                    item.setAttribute('title', 'การลากจัดลำดับใช้ได้เมื่อแสดงรายการทั้งหมดและเรียงตามลำดับล่าสุด');
                }
            });
        }

        function handleInstructionDragStart(event) {
            const item = event.currentTarget;
            const instructionId = item.getAttribute('data-id');
            if (!instructionId) return;
            instructionDragState.draggingId = instructionId;
            item.classList.add('dragging');
            if (event.dataTransfer) {
                event.dataTransfer.effectAllowed = 'move';
                event.dataTransfer.setData('text/plain', instructionId);
            }
        }

        function handleInstructionDragOver(event) {
            if (!instructionDragState.draggingId) return;
            event.preventDefault();
            if (event.dataTransfer) {
                event.dataTransfer.dropEffect = 'move';
            }
            const target = event.currentTarget;
            if (target && target.getAttribute('data-id') !== instructionDragState.draggingId) {
                target.classList.add('drag-over');
            }
        }

        function handleInstructionDragLeave(event) {
            const target = event.currentTarget;
            target.classList.remove('drag-over');
        }

        async function handleInstructionDrop(event) {
            event.preventDefault();
            const target = event.currentTarget;
            target.classList.remove('drag-over');

            const sourceId = instructionDragState.draggingId;
            const targetId = target.getAttribute('data-id');

            if (!sourceId || !targetId || sourceId === targetId) {
                instructionDragState.draggingId = null;
                return;
            }

            const fromIndex = instructionDataStore.findIndex(item => item._id === sourceId);
            const toIndex = instructionDataStore.findIndex(item => item._id === targetId);
            if (fromIndex === -1 || toIndex === -1) {
                instructionDragState.draggingId = null;
                return;
            }

            const reordered = [...instructionDataStore];
            const [moved] = reordered.splice(fromIndex, 1);
            reordered.splice(toIndex, 0, moved);
            reordered.forEach((entry, index) => {
                entry.order = index;
            });

            instructionDataStore = reordered;
            applyInstructionFilters({ silent: true });

            const orderedIds = reordered.map(item => item._id);
            try {
                await persistInstructionOrder(orderedIds);
            } catch (error) {
                console.error('persistInstructionOrder error:', error);
                await refreshInstructionsList({ silent: true });
            } finally {
                instructionDragState.draggingId = null;
            }
        }

        function handleInstructionDragEnd(event) {
            event.currentTarget.classList.remove('dragging');
            instructionDragState.draggingId = null;
        }

        async function persistInstructionOrder(orderedIds) {
            try {
                const response = await fetch('/admin/instructions/reorder/drag', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderedIds })
                });
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.error || 'ไม่สามารถบันทึกการจัดลำดับได้');
                }
                showNotification('จัดลำดับคำแนะนำใหม่เรียบร้อยแล้ว', 'success', 2000);
            } catch (error) {
                showNotification(error.message || 'ไม่สามารถจัดลำดับใหม่ได้', 'error');
                throw error;
            }
        }

        const initialInstructionsData = <%- JSON.stringify(instructions || []) %>;
        let instructionDataStore = [];
        const instructionFilterState = {
            search: '',
            type: 'all'
        };
        const instructionDragState = {
            draggingId: null
        };
        const instructionFilterRefs = {
            searchInput: null,
            typeSelect: null
        };

        function debounce(fn, delay = 300) {
            let timeoutId;
            return function(...args) {
                if (timeoutId) clearTimeout(timeoutId);
                timeoutId = setTimeout(() => fn.apply(this, args), delay);
            };
        }

        // ===== LOADING OVERLAY =====
        function showLoadingOverlay(message = 'กำลังประมวลผล...') {
            const existingOverlay = document.querySelector('.loading-overlay');
            if (existingOverlay) {
                existingOverlay.remove();
            }

            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                backdrop-filter: blur(2px);
            `;

            overlay.innerHTML = `
                <div class="bg-white rounded p-4 text-center" style="min-width: 200px;">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                    <div class="text-muted">${message}</div>
                </div>
            `;

            document.body.appendChild(overlay);
            return overlay;
        }

        function hideLoadingOverlay() {
            const overlay = document.querySelector('.loading-overlay');
            if (overlay) {
                overlay.style.opacity = '0';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.remove();
                    }
                }, 300);
            }
        }

        // ===== DYNAMIC CONTENT UPDATES =====
        const normalizeInstruction = (raw) => {
            if (!raw || typeof raw !== 'object') {
                return {
                    _id: '',
                    type: 'text',
                    title: '',
                    content: '',
                    createdAt: null,
                    order: Date.now()
                };
            }

            const idValue = raw._id && typeof raw._id === 'object' && typeof raw._id.toString === 'function'
                ? raw._id.toString()
                : String(raw._id || '');

            const createdAt = raw.createdAt ? new Date(raw.createdAt).getTime() : null;
            const orderValue = typeof raw.order === 'number' ? raw.order : (createdAt || Date.now());

            return {
                _id: idValue,
                type: raw.type === 'table' ? 'table' : 'text',
                title: raw.title || '',
                content: raw.content || '',
                createdAt: createdAt,
                order: orderValue,
                raw
            };
        };

        const setInstructionData = (list) => {
            const normalized = Array.isArray(list) ? list.map(normalizeInstruction) : [];
            instructionDataStore = normalized;
            applyInstructionFilters({ silent: true });
        };

        function applyInstructionFilters(options = {}) {
            const { silent = false } = options;
            let filtered = [...instructionDataStore].sort((a, b) => (a.order || 0) - (b.order || 0));

            if (instructionFilterState.type !== 'all') {
                filtered = filtered.filter(item => item.type === instructionFilterState.type);
            }

            if (instructionFilterState.search.trim()) {
                const keywords = instructionFilterState.search.trim().toLowerCase();
                filtered = filtered.filter(item => {
                    const haystack = `${item.title} ${item.content}`.toLowerCase();
                    return haystack.includes(keywords);
                });
            }

            const toRender = filtered.map(item => item.raw || item);
            updateInstructionsListHTML(toRender);

            if (!silent && filtered.length === 0) {
                showNotification('ไม่พบข้อมูลที่ตรงกับเงื่อนไขที่เลือก', 'info', 2500);
            }
        }

        async function refreshInstructionsList(options = {}) {
            const { silent = false } = options;
            try {
                const response = await fetch('/admin/instructions/list');
                const data = await response.json();
                
                if (data.success) {
                    setInstructionData(data.instructions);
                    if (!silent) {
                        showNotification('รายการ Instructions อัพเดตแล้ว', 'success', 2000);
                    }
                }
            } catch (error) {
                console.error('Error refreshing instructions list:', error);
                if (!silent) {
                    showNotification('ไม่สามารถรีเฟรชรายการได้', 'error');
                }
            }
        }

        function updateInstructionsListHTML(instructions) {
            const container = document.getElementById('instructionItems');
            if (!container) return;

            if (!Array.isArray(instructions) || instructions.length === 0) {
                const iconClass = instructionDataStore.length === 0 ? 'fa-file-alt' : 'fa-search';
                const titleText = instructionDataStore.length === 0
                    ? 'ยังไม่มีข้อมูลคำแนะนำ'
                    : 'ไม่พบข้อมูลที่ตรงกับเงื่อนไข';
                const subtitle = instructionDataStore.length === 0
                    ? 'เริ่มต้นเพิ่มคำแนะนำใหม่เพื่อให้ AI เข้าใจธุรกิจของคุณ'
                    : 'ลองปรับคำค้นหรือประเภทให้หลากหลายขึ้น';

                container.innerHTML = `
                    <div class="text-center py-4 bg-light rounded">
                        <i class="fas ${iconClass} text-muted fs-3 mb-2"></i>
                        <p class="text-muted mb-1">${titleText}</p>
                        <p class="text-muted small mb-0">${subtitle}</p>
                    </div>
                `;
                return;
            }

            let html = '';
            instructions.forEach(instruction => {
                html += `
                    <div class="instruction-item" data-id="${instruction._id}">
                        <div class="d-flex align-items-start justify-content-between gap-3">
                            <div class="d-flex align-items-start gap-2 flex-grow-1">
                                <span class="instruction-drag-handle" aria-hidden="true">
                                    <i class="fas fa-grip-vertical"></i>
                                </span>
                                <div>
                                    <span class="instruction-type ${instruction.type === 'text' ? 'type-text' : 'type-table'}">
                                        ${instruction.type === 'text' ? 'ข้อความ' : 'ตาราง'}
                                    </span>
                                    <h6 class="mt-2 mb-0">${instruction.title || 'ไม่มีหัวข้อ'}</h6>
                                </div>
                            </div>
                            <div class="btn-group">
                                <a href="/admin/instructions/${instruction._id}/edit" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-edit"></i>
                                </a>
                                ${instruction.type === 'table' ? `
                                    <button class="btn btn-sm btn-outline-info view-json" data-id="${instruction._id}">
                                        <i class="fas fa-code"></i>
                                    </button>
                                ` : ''}
                                <button class="btn btn-sm btn-outline-danger delete-instruction" data-id="${instruction._id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary move-instruction" data-id="${instruction._id}" data-direction="up">
                                    <i class="fas fa-arrow-up"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary move-instruction" data-id="${instruction._id}" data-direction="down">
                                    <i class="fas fa-arrow-down"></i>
                                </button>
                            </div>
                        </div>
                        ${instruction.type === 'text' && instruction.content ? `
                            <div class="mt-2 text-muted small">
                                ${instruction.content.length > 150 ? instruction.content.substring(0, 150) + '...' : instruction.content}
                            </div>
                        ` : ''}
                        ${instruction.type === 'table' ? `
                            <div class="mt-2 bg-light-info p-2 rounded">
                                <small class="text-info">
                                    <i class="fas fa-table me-1"></i> ข้อมูลตาราง - คลิกปุ่ม <i class="fas fa-code"></i> เพื่อดู JSON
                                </small>
                            </div>
                        ` : ''}
                    </div>
                `;
            });

            container.innerHTML = html;
            setupInstructionEventListeners();
        }

        // ===== TABLE BUILDER =====
        const instructionTableBuilder = (() => {
            let isInitialized = false;
            let columns = ['คอลัมน์ 1', 'คอลัมน์ 2'];
            let rows = [
                ['', ''],
                ['', ''],
                ['', '']
            ];

            const refs = {
                headerRow: null,
                bodyRows: null,
                addColumnBtn: null,
                addRowBtn: null,
                clearBtn: null,
                hiddenInput: null
            };

            const escapeHtml = (value) => {
                if (value === null || value === undefined) return '';
                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            };

            const ensureColumnDefaults = () => {
                columns = columns.map((col, index) => {
                    const name = (col || '').trim();
                    return name || `คอลัมน์ ${index + 1}`;
                });
            };

            const ensureRowWidths = () => {
                rows = rows.map(row => {
                    const nextRow = Array.isArray(row) ? [...row] : [];
                    while (nextRow.length < columns.length) {
                        nextRow.push('');
                    }
                    if (nextRow.length > columns.length) {
                        nextRow.length = columns.length;
                    }
                    return nextRow;
                });
            };

            const renderHeader = () => {
                if (!refs.headerRow) return;
                ensureColumnDefaults();
                const headerHtml = columns.map((columnName, index) => `
                    <th scope="col">
                        <div class="table-header-control">
                            <input
                                type="text"
                                class="form-control form-control-sm table-header-input"
                                value="${escapeHtml(columnName)}"
                                data-col-index="${index}"
                                aria-label="ชื่อคอลัมน์ที่ ${index + 1}"
                            >
                            ${columns.length > 1 ? `
                                <button type="button" class="btn btn-link btn-sm text-danger p-0 ms-1 remove-column-btn" data-remove-column="${index}" title="ลบคอลัมน์นี้">
                                    <i class="fas fa-times-circle"></i>
                                </button>
                            ` : ''}
                        </div>
                    </th>
                `).join('');

                refs.headerRow.innerHTML = headerHtml + `
                    <th scope="col" class="text-center table-actions-col">
                        <i class="fas fa-ellipsis-h text-muted"></i>
                    </th>
                `;

                refs.headerRow.querySelectorAll('.table-header-input').forEach(input => {
                    input.addEventListener('input', (event) => {
                        const colIndex = Number(event.target.getAttribute('data-col-index'));
                        if (Number.isInteger(colIndex) && colIndex >= 0 && colIndex < columns.length) {
                            columns[colIndex] = event.target.value;
                        }
                    });
                });

                refs.headerRow.querySelectorAll('.remove-column-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const colIndex = Number(btn.getAttribute('data-remove-column'));
                        if (!Number.isInteger(colIndex)) return;
                        if (columns.length <= 1) {
                            showNotification('ต้องมีอย่างน้อย 1 คอลัมน์', 'info', 2500);
                            return;
                        }
                        columns.splice(colIndex, 1);
                        rows.forEach(row => row.splice(colIndex, 1));
                        render();
                    });
                });
            };

            const renderBody = () => {
                if (!refs.bodyRows) return;
                ensureRowWidths();

                const bodyHtml = rows.map((row, rowIndex) => `
                    <tr data-row-index="${rowIndex}">
                        ${row.map((cellValue, colIndex) => `
                            <td>
                                <input
                                    type="text"
                                    class="form-control form-control-sm table-cell-input"
                                    value="${escapeHtml(cellValue)}"
                                    data-row-index="${rowIndex}"
                                    data-col-index="${colIndex}"
                                >
                            </td>
                        `).join('')}
                        <td class="text-center">
                            <button type="button" class="btn btn-link text-danger btn-sm remove-row-btn" data-remove-row="${rowIndex}" title="ลบแถวนี้">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');

                refs.bodyRows.innerHTML = bodyHtml;

                refs.bodyRows.querySelectorAll('.table-cell-input').forEach(input => {
                    input.addEventListener('input', (event) => {
                        const rowIndex = Number(event.target.getAttribute('data-row-index'));
                        const colIndex = Number(event.target.getAttribute('data-col-index'));
                        if (!Number.isInteger(rowIndex) || !Number.isInteger(colIndex)) return;
                        if (!rows[rowIndex]) rows[rowIndex] = [];
                        rows[rowIndex][colIndex] = event.target.value;
                    });
                });

                refs.bodyRows.querySelectorAll('.remove-row-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const rowIndex = Number(btn.getAttribute('data-remove-row'));
                        if (!Number.isInteger(rowIndex)) return;
                        if (rows.length <= 1) {
                            rows[0] = new Array(columns.length).fill('');
                            render();
                            return;
                        }
                        rows.splice(rowIndex, 1);
                        render();
                    });
                });
            };

            const render = () => {
                renderHeader();
                renderBody();
            };

            const addColumn = () => {
                columns.push(`คอลัมน์ ${columns.length + 1}`);
                rows.forEach(row => row.push(''));
                render();
            };

            const addRow = () => {
                const newRow = new Array(columns.length).fill('');
                rows.push(newRow);
                render();
                // focus first cell of new row
                setTimeout(() => {
                    const lastRow = refs.bodyRows?.querySelector('tr:last-child input.table-cell-input');
                    if (lastRow) lastRow.focus();
                }, 0);
            };

            const clear = () => {
                columns = ['คอลัมน์ 1', 'คอลัมน์ 2'];
                rows = [
                    ['', ''],
                    ['', ''],
                    ['', '']
                ];
                render();
                if (refs.hiddenInput) {
                    refs.hiddenInput.value = '';
                }
            };

            const filterEmptyRows = (dataRows) => {
                return dataRows.filter(row => {
                    if (!Array.isArray(row)) return false;
                    return row.some(cell => (cell || '').trim() !== '');
                });
            };

            return {
                init() {
                    refs.headerRow = document.getElementById('tableHeaderRow');
                    refs.bodyRows = document.getElementById('tableBodyRows');
                    refs.addColumnBtn = document.getElementById('addColumnBtn');
                    refs.addRowBtn = document.getElementById('addRowBtn');
                    refs.clearBtn = document.getElementById('clearTableBtn');
                    refs.hiddenInput = document.getElementById('tableDataInput');

                    if (!refs.headerRow || !refs.bodyRows || !refs.hiddenInput) {
                        return;
                    }

                    if (!isInitialized) {
                        if (refs.addColumnBtn) {
                            refs.addColumnBtn.addEventListener('click', addColumn);
                        }
                        if (refs.addRowBtn) {
                            refs.addRowBtn.addEventListener('click', addRow);
                        }
                        if (refs.clearBtn) {
                            refs.clearBtn.addEventListener('click', () => {
                                if (confirm('ต้องการล้างข้อมูลตารางทั้งหมดหรือไม่?')) {
                                    clear();
                                }
                            });
                        }
                        isInitialized = true;
                    }

                    render();
                },
                reset() {
                    clear();
                },
                populateFromExisting(jsonString) {
                    try {
                        if (!jsonString) {
                            clear();
                            return;
                        }
                        const data = JSON.parse(jsonString);
                        const incomingColumns = Array.isArray(data.columns) && data.columns.length
                            ? data.columns.map(col => String(col || ''))
                            : null;
                        const incomingRows = Array.isArray(data.rows) ? data.rows : null;

                        if (incomingColumns) {
                            columns = incomingColumns;
                        }
                        if (incomingRows) {
                            rows = incomingRows.map(row => {
                                if (!Array.isArray(row)) return new Array(columns.length).fill('');
                                const normalized = row.map(cell => String(cell ?? ''));
                                while (normalized.length < columns.length) {
                                    normalized.push('');
                                }
                                if (normalized.length > columns.length) {
                                    normalized.length = columns.length;
                                }
                                return normalized;
                            });
                        } else {
                            rows = [new Array(columns.length).fill('')];
                        }
                        ensureColumnDefaults();
                        ensureRowWidths();
                        render();
                    } catch (error) {
                        console.warn('ไม่สามารถแปลงข้อมูลตารางเดิมได้:', error);
                        clear();
                    }
                },
                getPayload() {
                    ensureColumnDefaults();
                    ensureRowWidths();

                    const sanitizedColumns = columns.map(col => col.trim());
                    const sanitizedRows = rows.map(row => row.map(cell => (cell || '').trim()));
                    const meaningfulRows = filterEmptyRows(sanitizedRows);

                    return {
                        columns: sanitizedColumns,
                        rows: meaningfulRows
                    };
                },
                commitToHiddenInput() {
                    if (!refs.hiddenInput) return { success: false, message: 'ไม่พบข้อมูลตาราง' };
                    const payload = this.getPayload();

                    const hasColumn = payload.columns.some(col => col !== '');
                    if (!hasColumn) {
                        return { success: false, message: 'กรุณาตั้งชื่อคอลัมน์อย่างน้อย 1 คอลัมน์' };
                    }

                    if (payload.rows.length === 0) {
                        return { success: false, message: 'กรุณากรอกข้อมูลตารางอย่างน้อย 1 แถว' };
                    }

                    refs.hiddenInput.value = JSON.stringify(payload);
                    return { success: true };
                }
            };
        })();

        document.addEventListener('DOMContentLoaded', function() {
            console.log('Dashboard loaded - Setting up enhanced functionality...');
            
            // เพิ่ม CSS animations
            addDashboardStyles();
            
            // Setup enhanced event listeners
            setupInstructionEventListeners();
            
            // Toggle type selector
            const typeSelect = document.getElementById('typeSelect');
            const textEditor = document.getElementById('textEditor');
            const tableEditor = document.getElementById('tableEditor');
            const instructionForm = document.getElementById('instructionForm');
            const addInstructionModalEl = document.getElementById('addInstructionModal');

            if (typeSelect) {
                typeSelect.addEventListener('change', function() {
                    if (this.value === 'text') {
                        textEditor.style.display = 'block';
                        tableEditor.style.display = 'none';
                    } else {
                        textEditor.style.display = 'none';
                        tableEditor.style.display = 'block';
                        instructionTableBuilder.init();
                    }
                });

                // initialize default view
                if (typeSelect.value === 'table') {
                    textEditor.style.display = 'none';
                    tableEditor.style.display = 'block';
                }
            }

            instructionTableBuilder.init();

            if (addInstructionModalEl) {
                addInstructionModalEl.addEventListener('shown.bs.modal', () => {
                    const currentType = typeSelect?.value || 'text';
                    if (currentType === 'table') {
                        instructionTableBuilder.reset();
                    }
                });
            }

            if (instructionForm) {
                instructionForm.addEventListener('submit', function(event) {
                    const currentType = typeSelect?.value || 'text';
                    if (currentType !== 'table') {
                        return;
                    }

                    const result = instructionTableBuilder.commitToHiddenInput();
                    if (!result.success) {
                        event.preventDefault();
                        showNotification(result.message || 'ไม่สามารถบันทึกข้อมูลตารางได้', 'error');
                    }
                });
            }

            instructionFilterRefs.searchInput = document.getElementById('instructionSearchInput');
            instructionFilterRefs.typeSelect = document.getElementById('instructionTypeFilter');
            if (instructionFilterRefs.searchInput) {
                instructionFilterRefs.searchInput.value = instructionFilterState.search;
                const handleSearchInput = debounce((event) => {
                    instructionFilterState.search = event.target.value || '';
                    applyInstructionFilters();
                }, 250);
                instructionFilterRefs.searchInput.addEventListener('input', handleSearchInput);
            }

            if (instructionFilterRefs.typeSelect) {
                instructionFilterRefs.typeSelect.value = instructionFilterState.type;
                instructionFilterRefs.typeSelect.addEventListener('change', (event) => {
                    instructionFilterState.type = event.target.value || 'all';
                    applyInstructionFilters();
                });
            }

            // Enhanced Preview button
            const previewBtn = document.getElementById('previewBtn');
            if (previewBtn) {
                previewBtn.addEventListener('click', async function() {
                    const loadingOverlay = showLoadingOverlay('กำลังเตรียมตัวอย่าง...');
                    
                    try {
                        const response = await fetch('/admin/instructions/preview');
                        const data = await response.json();
                        
                        hideLoadingOverlay();
                        
                        if (data.success) {
                            const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
                            previewModal.show();
                            document.getElementById('previewContent').innerHTML = `<pre style="white-space: pre-wrap;">${data.instructions}</pre>`;
                            showNotification('แสดงตัวอย่างเรียบร้อย', 'success', 2000);
                        } else {
                            document.getElementById('previewContent').innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
                            showNotification('ไม่สามารถสร้างตัวอย่างได้', 'error');
                        }
                    } catch (err) {
                        hideLoadingOverlay();
                        document.getElementById('previewContent').innerHTML = `<div class="alert alert-danger">เกิดข้อผิดพลาดในการโหลดข้อมูล</div>`;
                        showNotification('เกิดข้อผิดพลาดในการสร้างตัวอย่าง', 'error');
                    }
                });
            }

            // Enhanced AI Toggle
            const toggleAI = document.getElementById('toggleAI');
            if (toggleAI) {
                toggleAI.addEventListener('change', async function() {
                    const enabled = this.checked;
                    const statusLabel = document.getElementById('statusLabel');
                    
                    // แสดง loading state
                    const originalText = statusLabel.textContent;
                    statusLabel.textContent = 'กำลังอัพเดต...';
                    this.disabled = true;
                    
                    try {
                        const response = await fetch('/admin/ai-toggle', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ enabled })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            statusLabel.textContent = enabled ? 'ใช้งาน' : 'ปิดใช้งาน';
                            statusLabel.className = `badge ${enabled ? 'bg-success' : 'bg-danger'}`;
                            showNotification(`AI ${enabled ? 'เปิดใช้งาน' : 'ปิดใช้งาน'}เรียบร้อยแล้ว`, 'success');
                        } else {
                            // Revert toggle state
                            this.checked = !enabled;
                            statusLabel.textContent = originalText;
                            showNotification('ไม่สามารถเปลี่ยนสถานะ AI ได้', 'error');
                        }
                    } catch (error) {
                        // Revert toggle state
                        this.checked = !enabled;
                        statusLabel.textContent = originalText;
                        showNotification('เกิดข้อผิดพลาดในการเปลี่ยนสถานะ AI', 'error');
                    } finally {
                        this.disabled = false;
                    }
                });
            }

            // Excel file preview and upload
            const previewExcelBtn = document.getElementById('previewExcelBtn');
            const excelUploadForm = document.getElementById('excelUploadForm');
            const uploadExcelBtn = document.getElementById('uploadExcelBtn');
            const previewSection = document.getElementById('previewSection');
            const excelPreviewContent = document.querySelector('#previewSection #previewContent');

            if (previewExcelBtn && excelUploadForm) {
                // ดูตัวอย่างไฟล์ Excel
                previewExcelBtn.addEventListener('click', async function() {
                    const formData = new FormData(excelUploadForm);
                    try {
                        const response = await fetch('/admin/instructions/preview-excel', {
                            method: 'POST',
                            body: formData
                        });
                        const data = await response.json();

                        if (data.success) {
                            previewSection.style.display = 'block';
                            excelPreviewContent.innerHTML = data.preview.map(item => `
                                <div class="mb-2">
                                    <strong>${item.title || item.sheetName || 'ไม่ระบุชื่อ'}</strong>
                                    <span class="badge bg-secondary ms-1">${item.type}</span>
                                    <div class="small text-muted">${item.contentPreview}</div>
                                </div>
                            `).join('');
                            uploadExcelBtn.disabled = false;
                        } else {
                            excelPreviewContent.innerHTML = `<div class="alert alert-danger">${data.error || 'ไม่สามารถดูตัวอย่างได้'}</div>`;
                            uploadExcelBtn.disabled = true;
                        }
                    } catch (err) {
                        excelPreviewContent.innerHTML = '<div class="alert alert-danger">เกิดข้อผิดพลาดในการดูตัวอย่าง</div>';
                        uploadExcelBtn.disabled = true;
                    }
                });

                // อัปโหลดไฟล์ Excel
                excelUploadForm.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    const formData = new FormData(excelUploadForm);
                    try {
                        const response = await fetch('/admin/instructions/upload-excel', {
                            method: 'POST',
                            body: formData
                        });
                        const data = await response.json();

                        if (data.success) {
                            showNotification(data.message || 'อัพโหลดไฟล์สำเร็จ', 'success');
                            setTimeout(() => window.location.reload(), 1500);
                        } else {
                            showNotification(data.error || 'อัพโหลดล้มเหลว', 'error');
                        }
                    } catch (err) {
                        showNotification('เกิดข้อผิดพลาดในการอัพโหลดไฟล์', 'error');
                    }
                });
            }

            // Setup initial notification
            showNotification('ระบบพร้อมใช้งาน', 'success', 3000);
        });

        // ===== ENHANCED CONFIRM DIALOG =====
        function showConfirmDialog(title, message) {
            return new Promise((resolve) => {
                // สร้าง modal dialog
                const confirmModal = document.createElement('div');
                confirmModal.className = 'modal fade';
                confirmModal.id = 'dynamicConfirmModal';
                confirmModal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title">
                                    <i class="fas fa-exclamation-triangle me-2"></i>${title}
                                </h5>
                            </div>
                            <div class="modal-body">
                                <p class="mb-2">${message}</p>
                                <div class="text-danger">
                                    <small><i class="fas fa-info-circle me-1"></i>การดำเนินการนี้ไม่สามารถยกเลิกได้</small>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                                <button type="button" class="btn btn-warning" id="confirmButton">
                                    <i class="fas fa-check me-2"></i>ยืนยัน
                                </button>
                            </div>
                        </div>
                    </div>
                `;

                document.body.appendChild(confirmModal);
                const modal = new bootstrap.Modal(confirmModal);
                
                // Event listeners
                document.getElementById('confirmButton').addEventListener('click', () => {
                    modal.hide();
                    resolve(true);
                });

                confirmModal.addEventListener('hidden.bs.modal', () => {
                    confirmModal.remove();
                    resolve(false);
                });

                modal.show();
            });
        }

        // ===== CSS STYLES =====
        function addDashboardStyles() {
            if (document.querySelector('#dashboard-styles')) {
                return;
            }

            const styles = document.createElement('style');
            styles.id = 'dashboard-styles';
            styles.textContent = `
                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }

                @keyframes fadeOut {
                    from {
                        opacity: 1;
                        transform: scale(1);
                    }
                    to {
                        opacity: 0;
                        transform: scale(0.95);
                    }
                }

                .notification-toast {
                    animation: slideInRight 0.3s ease-out;
                }

                .instruction-item {
                    transition: all 0.3s ease;
                }

                .instruction-item:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }

                .btn:hover {
                    transform: translateY(-1px);
                    transition: all 0.2s ease;
                }

                .btn:active {
                    transform: translateY(0);
                }

                .btn:disabled {
                    transform: none;
                }

                .loading-overlay {
                    animation: fadeIn 0.3s ease-out;
                }

                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }

                .spinner-border {
                    animation: spin 1s linear infinite;
                }
            `;

            document.head.appendChild(styles);
        }

        // ===== ENHANCED EVENT LISTENERS =====
        function setupInstructionEventListeners() {
            // Enhanced Delete functionality
            document.querySelectorAll('.delete-instruction').forEach(btn => {
                btn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const instructionId = this.getAttribute('data-id');
                    
                    if (await showConfirmDialog('คุณต้องการลบข้อมูลนี้ใช่หรือไม่?', 'การลบจะไม่สามารถกู้คืนได้')) {
                        const loadingOverlay = showLoadingOverlay('กำลังลบข้อมูล...');

                        try {
                            const response = await fetch(`/admin/instructions/${instructionId}/delete`, {
                                method: 'POST'
                            });

                            hideLoadingOverlay();

                            if (response.ok) {
                                instructionDataStore = instructionDataStore.filter(item => item._id !== instructionId);
                                applyInstructionFilters({ silent: true });
                                showNotification('ลบข้อมูลเรียบร้อยแล้ว', 'success');
                            } else {
                                showNotification('ไม่สามารถลบข้อมูลได้', 'error');
                            }
                        } catch (error) {
                            hideLoadingOverlay();
                            showNotification('เกิดข้อผิดพลาดในการลบข้อมูล', 'error');
                        }
                    }
                });
            });

            // Enhanced Move functionality  
            document.querySelectorAll('.move-instruction').forEach(btn => {
                btn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const instructionId = this.getAttribute('data-id');
                    const direction = this.getAttribute('data-direction');
                    
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                    this.disabled = true;
                    
                    try {
                        const response = await fetch('/admin/instructions/reorder', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ instructionId, direction })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                await refreshInstructionsList({ silent: true });
                            showNotification(`เลื่อน${direction === 'up' ? 'ขึ้น' : 'ลง'}เรียบร้อยแล้ว`, 'success', 2000);
                        } else {
                            showNotification(data.error || 'ไม่สามารถเลื่อนตำแหน่งได้', 'warning');
                        }
                    } catch (error) {
                        showNotification('เกิดข้อผิดพลาดในการเลื่อนตำแหน่ง', 'error');
                    } finally {
                        this.innerHTML = originalText;
                        this.disabled = false;
                    }
                });
            });

            // Enhanced JSON View
            document.querySelectorAll('.view-json').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const instructionId = this.getAttribute('data-id');
                    const loadingOverlay = showLoadingOverlay('กำลังโหลดข้อมูล JSON...');
                    
                    try {
                        const response = await fetch(`/admin/instructions/${instructionId}/json`);
                        const data = await response.json();
                        
                        hideLoadingOverlay();
                        
                        if (data.success) {
                            document.getElementById('jsonTitle').textContent = data.title || 'ข้อมูลตาราง';
                            document.getElementById('jsonContent').textContent = JSON.stringify(data.tableData, null, 2);
                            const jsonModal = new bootstrap.Modal(document.getElementById('jsonModal'));
                            jsonModal.show();
                            showNotification('แสดงข้อมูล JSON เรียบร้อย', 'success', 2000);
                        } else {
                            showNotification(data.error || 'ไม่สามารถโหลดข้อมูล JSON ได้', 'error');
                        }
                    } catch (error) {
                        hideLoadingOverlay();
                        showNotification('เกิดข้อผิดพลาดในการโหลดข้อมูล JSON', 'error');
                    }
                });
            });

            setupInstructionDragAndDrop();
        }

        // ===== INSTRUCTION LIBRARY SYSTEM =====
        let currentRestoreLibraryDate = null;
        let currentAssignLibraryDate = null;
        let lineBotsCache = [];
        let facebookBotsCache = [];

        async function loadBotCaches(force = false) {
            if (!force && Array.isArray(lineBotsCache) && lineBotsCache.length > 0 &&
                Array.isArray(facebookBotsCache) && facebookBotsCache.length > 0) {
                return;
            }
            try {
                const [lineRes, facebookRes] = await Promise.all([
                    fetch('/api/line-bots'),
                    fetch('/api/facebook-bots')
                ]);
                if (lineRes.ok) {
                    lineBotsCache = await lineRes.json();
                }
                if (facebookRes.ok) {
                    facebookBotsCache = await facebookRes.json();
                }
            } catch (err) {
                console.error('Error loading bot caches:', err);
            }
        }

        function countLibraryUsage(libraryDate) {
            const lineCount = lineBotsCache.filter(bot => Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(libraryDate)).length;
            const facebookCount = facebookBotsCache.filter(bot => Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(libraryDate)).length;
            return { lineCount, facebookCount };
        }

        function renderAssignLibraryLists() {
            const lineContainer = document.getElementById('assignLineBotList');
            const facebookContainer = document.getElementById('assignFacebookBotList');
            if (!lineContainer || !facebookContainer) return;

            if (!Array.isArray(lineBotsCache) || lineBotsCache.length === 0) {
                lineContainer.innerHTML = '<p class="text-muted small mb-0">ยังไม่มี Line Bot</p>';
            } else {
                lineContainer.innerHTML = lineBotsCache.map(bot => {
                    const isChecked = Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(currentAssignLibraryDate);
                    return `
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="assign-line-${bot._id}" data-bot-id="${bot._id}" ${isChecked ? 'checked' : ''}>
                            <label class="form-check-label" for="assign-line-${bot._id}">
                                <strong>${bot.name || 'ไม่ระบุชื่อ'}</strong>
                                <span class="badge bg-light text-dark ms-2">${(bot.selectedInstructions || []).length} คลัง</span>
                                <div class="text-muted small">${bot.description || 'ไม่มีคำอธิบาย'}</div>
                            </label>
                        </div>
                    `;
                }).join('');
            }

            if (!Array.isArray(facebookBotsCache) || facebookBotsCache.length === 0) {
                facebookContainer.innerHTML = '<p class="text-muted small mb-0">ยังไม่มี Facebook Bot</p>';
            } else {
                facebookContainer.innerHTML = facebookBotsCache.map(bot => {
                    const isChecked = Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(currentAssignLibraryDate);
                    return `
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="assign-fb-${bot._id}" data-bot-id="${bot._id}" ${isChecked ? 'checked' : ''}>
                            <label class="form-check-label" for="assign-fb-${bot._id}">
                                <strong>${bot.name || 'ไม่ระบุชื่อ'}</strong>
                                <span class="badge bg-light text-dark ms-2">${(bot.selectedInstructions || []).length} คลัง</span>
                                <div class="text-muted small">${bot.description || 'ไม่มีคำอธิบาย'}</div>
                            </label>
                        </div>
                    `;
                }).join('');
            }
        }

        async function openAssignLibraryModal(libraryDate, libraryDisplay) {
            currentAssignLibraryDate = libraryDate;
            document.getElementById('assignLibraryTitle').textContent = `เลือกใช้ "${libraryDisplay}" กับเพจ`;
            await loadBotCaches(true);
            renderAssignLibraryLists();
            const modal = new bootstrap.Modal(document.getElementById('assignLibraryModal'));
            modal.show();
        }

        async function applyLibrarySelection() {
            if (!currentAssignLibraryDate) return;
            const confirmBtn = document.getElementById('confirmAssignLibraryBtn');
            const originalText = confirmBtn.innerHTML;
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> กำลังบันทึก...';
            confirmBtn.disabled = true;

            const selectedLineIds = Array.from(document.querySelectorAll('#assignLineBotList .form-check-input'))
                .filter(input => input.checked)
                .map(input => input.getAttribute('data-bot-id'));
            const selectedFacebookIds = Array.from(document.querySelectorAll('#assignFacebookBotList .form-check-input'))
                .filter(input => input.checked)
                .map(input => input.getAttribute('data-bot-id'));

            const tasks = [];
            const errors = [];

            for (const bot of lineBotsCache) {
                const shouldHave = selectedLineIds.includes(bot._id);
                const has = Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(currentAssignLibraryDate);
                if (shouldHave !== has) {
                    const nextSet = new Set(Array.isArray(bot.selectedInstructions) ? bot.selectedInstructions : []);
                    if (shouldHave) nextSet.add(currentAssignLibraryDate);
                    else nextSet.delete(currentAssignLibraryDate);
                    const payload = Array.from(nextSet);
                    tasks.push(
                        fetch(`/api/line-bots/${bot._id}/instructions`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ selectedInstructions: payload })
                        }).then(res => {
                            if (!res.ok) throw new Error(`Line Bot ${bot.name || bot._id} อัปเดตไม่สำเร็จ`);
                            bot.selectedInstructions = payload;
                        }).catch(err => errors.push(err.message))
                    );
                }
            }

            for (const bot of facebookBotsCache) {
                const shouldHave = selectedFacebookIds.includes(bot._id);
                const has = Array.isArray(bot.selectedInstructions) && bot.selectedInstructions.includes(currentAssignLibraryDate);
                if (shouldHave !== has) {
                    const nextSet = new Set(Array.isArray(bot.selectedInstructions) ? bot.selectedInstructions : []);
                    if (shouldHave) nextSet.add(currentAssignLibraryDate);
                    else nextSet.delete(currentAssignLibraryDate);
                    const payload = Array.from(nextSet);
                    tasks.push(
                        fetch(`/api/facebook-bots/${bot._id}/instructions`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ selectedInstructions: payload })
                        }).then(res => {
                            if (!res.ok) throw new Error(`Facebook Bot ${bot.name || bot._id} อัปเดตไม่สำเร็จ`);
                            bot.selectedInstructions = payload;
                        }).catch(err => errors.push(err.message))
                    );
                }
            }

            try {
                await Promise.all(tasks);
            } catch (_) {
                // errors already collected
            } finally {
                confirmBtn.innerHTML = originalText;
                confirmBtn.disabled = false;
            }

            if (errors.length > 0) {
                showNotification(errors.join('<br>'), 'error', 6000);
            } else {
                showNotification('บันทึกการเลือกใช้คลังให้แต่ละเพจเรียบร้อยแล้ว', 'success');
                const modal = bootstrap.Modal.getInstance(document.getElementById('assignLibraryModal'));
                if (modal) modal.hide();
                await loadLibraryList();
                currentAssignLibraryDate = null;
            }
        }

        // ฟังก์ชันโหลดรายการ instruction library
        async function loadLibraryList() {
            const libraryListContainer = document.getElementById('libraryList');
            
            // แสดง loading state
            libraryListContainer.innerHTML = `
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                    <p class="text-muted small mt-2">กำลังโหลดรายการ library...</p>
                </div>
            `;

            try {
                const response = await fetch('/admin/instructions/library');
                const data = await response.json();
                
                if (data.success) {
                    await loadBotCaches(true);
                    displayLibraryList(data.libraries);
                } else {
                    libraryListContainer.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ไม่สามารถโหลดรายการ library ได้: ${data.error}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading library list:', error);
                libraryListContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        เกิดข้อผิดพลาดในการโหลดรายการ library
                    </div>
                `;
            }
        }

        // ฟังก์ชันแสดงรายการ instruction library
        function displayLibraryList(libraries) {
            const libraryListContainer = document.getElementById('libraryList');
            
            if (libraries.length === 0) {
                libraryListContainer.innerHTML = `
                    <div class="text-center py-4 bg-light rounded">
                        <i class="fas fa-book text-muted fs-3 mb-2"></i>
                        <p class="text-muted mb-0">ยังไม่มี instruction library</p>
                        <small class="text-muted">กดปุ่มด้านบนเพื่อสร้าง library ใหม่</small>
                    </div>
                `;
                return;
            }

            let html = '<div class="list-group">';

            libraries.forEach(library => {
                const libraryDate = new Date(library.savedAt);
                const isManual = library.type === 'manual';
                const isBeforeRestore = library.type === 'before_restore';

                let typeIcon = 'fas fa-clock';
                let typeText = 'อัตโนมัติ';
                let typeClass = 'text-info';

                if (isManual) {
                    typeIcon = 'fas fa-user';
                    typeText = 'ด้วยตนเอง';
                    typeClass = 'text-primary';
                } else if (isBeforeRestore) {
                    typeIcon = 'fas fa-shield-alt';
                    typeText = 'ก่อนคืนค่า';
                    typeClass = 'text-warning';
                }

                const usage = countLibraryUsage(library.date);

                html += `
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-1">
                                    <i class="${typeIcon} ${typeClass} me-2"></i>
                                    ${library.name || library.displayDate || library.date}
                                    <small class="text-muted">${library.displayTime || ''}</small>
                                </h6>
                                <p class="mb-1 small text-muted">
                                    ${library.description || 'ไม่มีคำอธิบาย'}
                                </p>
                                <p class="mb-1 small text-muted">
                                    ประเภท: <span class="${typeClass}">${typeText}</span>
                                </p>
                                <p class="mb-1 small text-muted">
                                    ใช้งานกับ <strong>${usage.lineCount}</strong> Line Bot, <strong>${usage.facebookCount}</strong> Facebook Bot
                                </p>
                                <small class="text-muted">
                                    บันทึกเมื่อ: ${libraryDate.toLocaleString('th-TH')}
                                </small>
                            </div>
                            <div class="text-end">
                                <button class="btn btn-outline-primary btn-sm assign-library mb-2"
                                        data-date="${library.date}"
                                        data-display="${library.name || library.displayDate || library.date}"
                                        title="เลือกใช้คลังนี้กับเพจที่ต้องการ">
                                    <i class="fas fa-check-double me-1"></i> เลือกใช้ในเพจ
                                </button>
                                <div class="d-flex flex-wrap gap-1 justify-content-end">
                                    <button class="btn btn-outline-secondary btn-sm edit-library"
                                            data-date="${library.date}"
                                            data-name="${library.name || ''}"
                                            data-description="${library.description || ''}"
                                            title="แก้ไขชื่อ/คำอธิบาย">
                                        <i class="fas fa-edit me-1"></i> แก้ไข
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm delete-library"
                                            data-date="${library.date}"
                                            title="ลบ library นี้">
                                        <i class="fas fa-trash me-1"></i> ลบ
                                    </button>
                                    <button class="btn btn-link btn-sm text-danger restore-library"
                                            data-date="${library.date}"
                                            data-display="${library.name || library.displayDate || library.date}"
                                            title="คืนค่า library นี้">
                                        <i class="fas fa-undo me-1"></i> คืนค่า
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            libraryListContainer.innerHTML = html;

            // Setup event listeners for library actions
            setupLibraryEventListeners();
        }

        // ฟังก์ชันจัดการปุ่ม library (คืนค่า/แก้ไข/ลบ)
        function setupLibraryEventListeners() {
            document.querySelectorAll('.assign-library').forEach(btn => {
                btn.addEventListener('click', function() {
                    const date = this.getAttribute('data-date');
                    const display = this.getAttribute('data-display') || date;
                    openAssignLibraryModal(date, display);
                });
            });

            // Restore
            document.querySelectorAll('.restore-library').forEach(btn => {
                btn.addEventListener('click', function() {
                    currentRestoreLibraryDate = this.getAttribute('data-date');
                    const displayDate = this.getAttribute('data-display');

                    // อัพเดตข้อความใน confirmation modal
                    const modalBody = document.querySelector('#restoreConfirmModal .modal-body');
                    modalBody.querySelector('p').innerHTML = `<strong>คุณกำลังจะคืนค่า instructions จาก library: ${displayDate}</strong>`;

                    // เปิด confirmation modal
                    const restoreModal = new bootstrap.Modal(document.getElementById('restoreConfirmModal'));
                    restoreModal.show();
                });
            });

            // Edit name/description
            document.querySelectorAll('.edit-library').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const date = this.getAttribute('data-date');
                    const currentName = this.getAttribute('data-name') || '';
                    const currentDesc = this.getAttribute('data-description') || '';

                    const newName = prompt('ชื่อคลังใหม่:', currentName);
                    if (newName === null) return;
                    const newDesc = prompt('คำอธิบายใหม่:', currentDesc);
                    if (newDesc === null) return;

                    try {
                        const response = await fetch(`/admin/instructions/library/${date}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ name: newName, description: newDesc })
                        });
                        const data = await response.json();
                        if (data.success) {
                            showNotification('อัพเดตข้อมูลคลังเรียบร้อยแล้ว', 'success');
                            await loadLibraryList();
                        } else {
                            showNotification('ไม่สามารถอัพเดตคลังได้: ' + data.error, 'error');
                        }
                    } catch (error) {
                        console.error('Error updating library:', error);
                        showNotification('เกิดข้อผิดพลาดในการอัพเดตคลัง', 'error');
                    }
                });
            });

            // Delete library
            document.querySelectorAll('.delete-library').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const date = this.getAttribute('data-date');
                    if (!confirm('ต้องการลบคลังนี้หรือไม่?')) return;

                    try {
                        const response = await fetch(`/admin/instructions/library/${date}`, {
                            method: 'DELETE'
                        });
                        const data = await response.json();
                        if (data.success) {
                            showNotification('ลบคลังเรียบร้อยแล้ว', 'success');
                            await loadLibraryList();
                        } else {
                            showNotification('ไม่สามารถลบคลังได้: ' + data.error, 'error');
                        }
                    } catch (error) {
                        console.error('Error deleting library:', error);
                        showNotification('เกิดข้อผิดพลาดในการลบคลัง', 'error');
                    }
                });
            });
        }

        // ฟังก์ชันสร้าง instruction library ใหม่
        async function createNewLibrary() {
            const createBtn = document.getElementById('createLibraryBtn');
            const originalText = createBtn.innerHTML;
            
            createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> กำลังสร้าง...';
            createBtn.disabled = true;

            try {
                const response = await fetch('/admin/instructions/library-now', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        name: `คลัง ${new Date().toLocaleDateString('th-TH')}`,
                        description: `คลัง instruction ที่สร้างด้วยตนเองเมื่อวันที่ ${new Date().toLocaleDateString('th-TH')}`
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    // รีโหลดรายการ library
                    await loadLibraryList();
                } else {
                    showNotification('ไม่สามารถสร้าง library ได้: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error creating library:', error);
                showNotification('เกิดข้อผิดพลาดในการสร้าง library', 'error');
            } finally {
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
            }
        }

        // ฟังก์ชันคืนค่า instruction library
        async function confirmRestoreLibrary() {
            if (!currentRestoreLibraryDate) return;

            const confirmBtn = document.getElementById('confirmRestoreBtn');
            const originalText = confirmBtn.innerHTML;
            const createLibraryBefore = document.getElementById('createBackupBeforeRestore').checked;
            
            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> กำลังคืนค่า...';
            confirmBtn.disabled = true;

            try {
                const response = await fetch(`/admin/instructions/restore/${currentRestoreLibraryDate}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ createLibraryBefore })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    
                    // ปิด modal และรีโหลดหน้า
                    const restoreModal = bootstrap.Modal.getInstance(document.getElementById('restoreConfirmModal'));
                    restoreModal.hide();
                    
                    const backupModal = bootstrap.Modal.getInstance(document.getElementById('backupModal'));
                    backupModal.hide();
                    
                    // รีโหลดหน้าหลังจาก 2 วินาที
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('ไม่สามารถคืนค่า library ได้: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error restoring library:', error);
                showNotification('เกิดข้อผิดพลาดในการคืนค่า library', 'error');
            } finally {
                confirmBtn.innerHTML = originalText;
                confirmBtn.disabled = false;
                currentRestoreLibraryDate = null;
            }
        }

        // Setup library event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // โหลดรายการ library เมื่อเปิด modal
            const backupModal = document.getElementById('backupModal');
            if (backupModal) {
                backupModal.addEventListener('shown.bs.modal', function() {
                    loadLibraryList();
                });
            }

            // Setup ปุ่มสร้าง library
            const createLibraryBtn = document.getElementById('createLibraryBtn');
            if (createLibraryBtn) {
                createLibraryBtn.addEventListener('click', createNewLibrary);
            }

            // Setup ปุ่มยืนยันการคืนค่า
            const confirmRestoreBtn = document.getElementById('confirmRestoreBtn');
            if (confirmRestoreBtn) {
                confirmRestoreBtn.addEventListener('click', confirmRestoreLibrary);
            }
            const confirmAssignBtn = document.getElementById('confirmAssignLibraryBtn');
            if (confirmAssignBtn) {
                confirmAssignBtn.addEventListener('click', applyLibrarySelection);
            }
            const assignModalEl = document.getElementById('assignLibraryModal');
            if (assignModalEl) {
                assignModalEl.addEventListener('hidden.bs.modal', () => {
                    currentAssignLibraryDate = null;
                });
            }

            // อัปเดตจำนวนข้อความที่ยังไม่ได้อ่านครั้งแรก
            updateUnreadCount();
        });

        setInstructionData(initialInstructionsData);

        // ฟังก์ชันสำหรับอัปเดตจำนวนข้อความที่ยังไม่ได้อ่าน
        async function updateUnreadCount() {
            try {
                const response = await fetch('/admin/chat/unread-count');
                const data = await response.json();
                
                if (data.success && data.totalUnread > 0) {
                    const badge = document.getElementById('chatNotificationBadge');
                    badge.textContent = data.totalUnread;
                    badge.style.display = 'inline';
                } else {
                    const badge = document.getElementById('chatNotificationBadge');
                    badge.style.display = 'none';
                }
            } catch (error) {
                console.error('ไม่สามารถอัปเดต unread count ได้:', error);
            }
        }

        // อัปเดตจำนวนข้อความที่ยังไม่ได้อ่านทุก 30 วินาที
        setInterval(updateUnreadCount, 30000);
    </script>
</body>
</html> 
