<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แอดมินแชท - LINE Chatbot</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        .chat-container {
            height: calc(100vh - 200px);
            overflow-y: auto;
        }
        .user-list {
            height: calc(100vh - 200px);
            overflow-y: auto;
            border-right: 1px solid #dee2e6;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 80%;
            word-wrap: break-word;
        }
        .message.user {
            background-color: #e3f2fd;
            margin-right: auto;
            text-align: left;
        }
        .message.assistant {
            background-color: #f5f5f5;
            margin-left: auto;
            text-align: right;
        }
        .message.admin {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            margin-left: auto;
            text-align: right;
        }
        .user-item {
            cursor: pointer;
            padding: 10px;
            border-bottom: 1px solid #f8f9fa;
            transition: background-color 0.2s;
        }
        .user-item:hover {
            background-color: #f8f9fa;
        }
        .user-item.active {
            background-color: #e3f2fd;
            border-left: 4px solid #2196f3;
        }
        .user-item.unread {
            background-color: #fff3cd;
        }
        .timestamp {
            font-size: 0.8em;
            color: #6c757d;
            margin-top: 5px;
        }
        .message-input {
            border: none;
            border-top: 1px solid #dee2e6;
            padding: 15px;
            background-color: #f8f9fa;
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-online { background-color: #28a745; }
        .status-offline { background-color: #dc3545; }
        .new-message-badge {
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 0.7em;
            margin-left: auto;
        }
        .typing-indicator {
            font-style: italic;
            color: #6c757d;
            padding: 10px;
        }
        .chat-header {
            background-color: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
        }
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #2196f3;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        .message-content {
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        
        .message-text {
            white-space: pre-wrap; /* Preserve line breaks and spaces */
            word-break: break-word; /* Break long words */
        }
        
        .message-image {
            text-align: center;
            margin-top: 5px;
        }
        
        .message-image img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .message-image img:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .user-uploaded-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .user-uploaded-image:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .image-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }
        
        .image-modal-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
            align-items: center;
            animation: slideIn 0.3s ease;
        }
        
        .image-modal-close {
            position: absolute;
            top: -15px;
            right: -15px;
            width: 30px;
            height: 30px;
            background-color: #dc3545;
            color: #fff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 1001;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .image-modal-close:hover {
            background-color: #c82333;
            transform: scale(1.1);
        }
        
        .image-modal-image {
            max-width: 100%;
            max-height: 90%;
            object-fit: contain;
            border-radius: 8px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: scale(0.8) translateY(-20px);
            }
            to { 
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        .image-error-fallback {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            color: #6c757d;
        }
        
        .image-error-fallback i {
            font-size: 2rem;
            margin-bottom: 10px;
        }
        .image-modal-info {
            padding: 10px;
            text-align: center;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
            width: 100%;
        }
        
        .image-actions {
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        
        .image-actions .btn {
            font-size: 0.8rem;
            padding: 4px 8px;
        }
        
        .image-info {
            text-align: center;
            margin-top: 5px;
            padding: 5px;
            background-color: #f8f9fa;
            border-radius: 4px;
            font-size: 0.8rem;
        }
        
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #28a745;
            color: white;
            padding: 12px 20px;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            animation: slideInRight 0.3s ease;
            max-width: 300px;
        }
        
        .toast-notification.error {
            background-color: #dc3545;
        }
        
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }
        
        .image-grid-item {
            text-align: center;
        }
        
        .user-uploaded-image.compact {
            max-width: 100%;
            height: 80px;
            object-fit: cover;
            border-radius: 6px;
        }
        
        .image-error-fallback.compact {
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8f9fa;
            border: 2px dashed #dee2e6;
            border-radius: 6px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">
                <i class="fas fa-robot"></i> จัดการ AI
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/dashboard">
                            <i class="fas fa-tachometer-alt"></i> แดชบอร์ด
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/broadcast">
                            <i class="fas fa-bullhorn"></i> บรอดแคสต์
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/admin/chat">
                            <i class="fas fa-comments"></i> แชท
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/followup">
                            <i class="fas fa-user-clock"></i> ติดตามลูกค้า
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/settings">
                            <i class="fas fa-cogs"></i> ตั้งค่า
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin">
                            <i class="fas fa-sign-out-alt"></i> ออกจากระบบ
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        <div class="row">
            <!-- Sidebar - รายชื่อผู้ใช้ -->
            <div class="col-md-4 col-lg-3">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-users me-2"></i>
                            รายชื่อผู้ใช้
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="user-list" id="userList">
                            <div class="text-center p-3 text-muted">
                                <i class="fas fa-spinner fa-spin"></i> กำลังโหลด...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="col-md-8 col-lg-9">
                <div class="card">
                    <div class="card-header chat-header" id="chatHeader">
                        <div class="text-center text-muted">
                            <i class="fas fa-comments me-2"></i>
                            เลือกผู้ใช้เพื่อเริ่มการสนทนา
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="chat-container" id="chatContainer">
                            <div class="text-center p-5 text-muted">
                                <i class="fas fa-comments fa-3x mb-3"></i>
                                <h5>ยินดีต้อนรับสู่ระบบแอดมินแชท</h5>
                                <p>เลือกผู้ใช้จากรายชื่อด้านซ้ายเพื่อเริ่มการสนทนา</p>
                            </div>
                        </div>
                        <div class="message-input" id="messageInput" style="display: none;">
                            <div class="input-group">
                                <input type="text" class="form-control" id="messageText" placeholder="พิมพ์ข้อความ..." maxlength="1000">
                                <button class="btn btn-primary" type="button" id="sendButton">
                                    <i class="fas fa-paper-plane"></i> ส่ง
                                </button>
                            </div>
                            <small class="text-muted">
                                <span id="charCount">0</span>/1000 อักขระ
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div class="modal fade" id="loadingModal" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <i class="fas fa-spinner fa-spin fa-2x text-primary mb-2"></i>
                    <p class="mb-0">กำลังโหลด...</p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket;
        let currentUserId = null;
        let users = [];
        let chatHistory = {};

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeSocket();
            loadUsers();
            setupEventListeners();
        });

        function initializeSocket() {
            socket = io();
            
            socket.on('connect', () => {
                console.log('เชื่อมต่อ Socket.IO สำเร็จ');
            });

            socket.on('newMessage', (data) => {
                console.log('ข้อความใหม่:', data);
                handleNewMessage(data);
            });

            socket.on('chatCleared', (data) => {
                if (data.userId === currentUserId) {
                    clearChatDisplay();
                }
                // อัปเดตรายชื่อผู้ใช้
                loadUsers();
            });
        }

        function setupEventListeners() {
            // ตัวนับอักขระ
            document.getElementById('messageText').addEventListener('input', function() {
                const count = this.value.length;
                document.getElementById('charCount').textContent = count;
                
                if (count > 900) {
                    document.getElementById('charCount').classList.add('text-danger');
                } else {
                    document.getElementById('charCount').classList.remove('text-danger');
                }
            });

            // ส่งข้อความ
            document.getElementById('sendButton').addEventListener('click', sendMessage);
            document.getElementById('messageText').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        }

        async function loadUsers() {
            try {
                const response = await fetch('/admin/chat/users');
                const data = await response.json();
                
                if (data.success) {
                    users = data.users;
                    renderUserList();
                } else {
                    console.error('ไม่สามารถโหลดรายชื่อผู้ใช้ได้:', data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการโหลดรายชื่อผู้ใช้:', error);
            }
        }

        function renderUserList() {
            const userList = document.getElementById('userList');
            
            if (users.length === 0) {
                userList.innerHTML = '<div class="text-center p-3 text-muted">ไม่มีผู้ใช้</div>';
                return;
            }

            const userHtml = users.map(user => {
                const isActive = user.userId === currentUserId;
                const hasUnread = user.unreadCount > 0;
                
                return `
                    <div class="user-item ${isActive ? 'active' : ''} ${hasUnread ? 'unread' : ''}" 
                         onclick="selectUser('${user.userId}')">
                        <div class="d-flex align-items-center">
                            <div class="user-avatar">
                                ${user.displayName.charAt(0).toUpperCase()}
                            </div>
                            <div class="flex-grow-1">
                                <div class="fw-bold">${user.displayName}</div>
                                <div class="text-muted small">
                                    ${user.lastMessage.substring(0, 50)}${user.lastMessage.length > 50 ? '...' : ''}
                                </div>
                                <div class="timestamp">
                                    ${formatTimestamp(user.lastTimestamp)}
                                </div>
                            </div>
                            ${hasUnread ? `<span class="new-message-badge">${user.unreadCount}</span>` : ''}
                        </div>
                    </div>
                `;
            }).join('');

            userList.innerHTML = userHtml;
        }

        async function selectUser(userId) {
            currentUserId = userId;
            
            // อัปเดต UI
            document.querySelectorAll('.user-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.user-item').classList.add('active');
            
            // แสดง chat header
            const user = users.find(u => u.userId === userId);
            if (user) {
                document.getElementById('chatHeader').innerHTML = `
                    <div class="user-info">
                        <div class="user-avatar">
                            ${user.displayName.charAt(0).toUpperCase()}
                        </div>
                        <div>
                            <h6 class="mb-0">${user.displayName}</h6>
                            <small class="text-muted">ข้อความ ${user.messageCount} ข้อความ</small>
                        </div>
                        <div class="ms-auto">
                            <button class="btn btn-sm btn-outline-danger" onclick="clearUserChat('${userId}')">
                                <i class="fas fa-trash"></i> ล้างประวัติ
                            </button>
                        </div>
                    </div>
                `;
            }
            
            // แสดง input
            document.getElementById('messageInput').style.display = 'block';
            
            // โหลดประวัติการสนทนา
            await loadChatHistory(userId);
        }

        async function loadChatHistory(userId) {
            try {
                const response = await fetch(`/admin/chat/history/${userId}`);
                const data = await response.json();
                
                if (data.success) {
                    chatHistory[userId] = data.messages;
                    renderChatHistory(userId);
                } else {
                    console.error('ไม่สามารถโหลดประวัติการสนทนาได้:', data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการโหลดประวัติการสนทนา:', error);
            }
        }

        async function renderChatHistory(userId) {
            const container = document.getElementById('chatContainer');
            const messages = chatHistory[userId] || [];
            
            if (messages.length === 0) {
                container.innerHTML = '<div class="text-center p-5 text-muted">ไม่มีประวัติการสนทนา</div>';
                return;
            }

            const chatHtml = messages.map(message => {
                const messageClass = message.role === 'user' ? 'user' : 
                                   message.source === 'admin_chat' ? 'admin' : 'assistant';
                const senderLabel = message.role === 'user' ? 'ผู้ใช้' : 
                                  message.source === 'admin_chat' ? 'แอดมิน' : 'AI Assistant';
                
                // แสดงเฉพาะข้อความใน <reply></reply> tags ถ้ามี
                let displayContent = message.content;
                if (message.role !== 'user' && message.content.includes('<reply>')) {
                    const replyMatch = message.content.match(/<reply>(.*?)<\/reply>/s);
                    if (replyMatch) {
                        displayContent = replyMatch[1].trim();
                    }
                }

                // กรองข้อความสำหรับ Assistant (ถ้าเป็นข้อความจาก AI)
                if (message.role === 'assistant' && message.source !== 'admin_chat') {
                    // ใช้ Promise เพื่อไม่ให้เกิด linter error
                    filterMessageForDisplay(displayContent).then(filteredContent => {
                        // อัปเดตข้อความใน DOM หลังจากกรองเสร็จ
                        const messageElement = container.querySelector(`[data-message-id="${message.timestamp}"]`);
                        if (messageElement) {
                            const contentElement = messageElement.querySelector('.message-content');
                            if (contentElement) {
                                contentElement.innerHTML = filteredContent;
                            }
                        }
                    });
                }

                // จัดการข้อความสำหรับผู้ใช้
                if (message.role === 'user') {
                    const processed = processQueueMessage(message.content);

                    if (processed.type === 'queue' || processed.type === 'single_image' || processed.type === 'single_text') {
                        displayContent = createCompactMessageHTML(processed);
                    } else {
                        // กรณีอื่นๆ ให้แสดงข้อความธรรมดา และรองรับการเว้นบรรทัด
                        displayContent = `<div class="message-text">${escapeHtml(message.content)}</div>`;
                    }
                } else {
                    // สำหรับข้อความที่ไม่ใช่ผู้ใช้ ให้ escape HTML และรองรับการเว้นบรรทัด
                    displayContent = `<div class="message-text">${escapeHtml(displayContent)}</div>`;
                }
                
                return `
                    <div class="message ${messageClass}" data-message-id="${message.timestamp}">
                        <div class="fw-bold small mb-1">${senderLabel}</div>
                        <div class="message-content">${displayContent}</div>
                        <div class="timestamp">${formatTimestamp(message.timestamp)}</div>
                    </div>
                `;
            }).join('');

            container.innerHTML = chatHtml;
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const messageText = document.getElementById('messageText').value.trim();
            if (!messageText || !currentUserId) return;

            try {
                const response = await fetch('/admin/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: currentUserId,
                        message: messageText
                    })
                });

                const data = await response.json();
                if (data.success) {
                    // เพิ่มข้อความใหม่ลงในประวัติ
                    const newMessage = {
                        content: messageText,
                        role: 'assistant',
                        timestamp: new Date(),
                        source: 'admin_chat'
                    };
                    
                    if (!chatHistory[currentUserId]) {
                        chatHistory[currentUserId] = [];
                    }
                    chatHistory[currentUserId].push(newMessage);
                    
                    // อัปเดตการแสดงผล
                    renderChatHistory(currentUserId);
                    
                    // ล้าง input
                    document.getElementById('messageText').value = '';
                    document.getElementById('charCount').textContent = '0';
                    
                    // อัปเดตรายชื่อผู้ใช้
                    loadUsers();
                } else {
                    alert('ไม่สามารถส่งข้อความได้: ' + data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการส่งข้อความ:', error);
                alert('เกิดข้อผิดพลาดในการส่งข้อความ');
            }
        }

        function handleNewMessage(data) {
            // อัปเดต unread count สำหรับผู้ใช้
            const user = users.find(u => u.userId === data.userId);
            if (user) {
                user.unreadCount = (user.unreadCount || 0) + 1;
                user.lastMessage = data.message.content;
                user.lastTimestamp = data.timestamp;
                
                // อัปเดตการแสดงผล
                renderUserList();
                
                // ถ้าเป็นผู้ใช้ที่กำลังดูอยู่ ให้อัปเดตการสนทนา
                if (data.userId === currentUserId) {
                    if (!chatHistory[currentUserId]) {
                        chatHistory[currentUserId] = [];
                    }
                    chatHistory[currentUserId].push(data.message);
                    renderChatHistory(currentUserId);
                }
            }
        }

        async function clearUserChat(userId) {
            if (!confirm('คุณแน่ใจหรือไม่ที่จะล้างประวัติการสนทนาของผู้ใช้นี้?')) {
                return;
            }

            try {
                const response = await fetch(`/admin/chat/clear/${userId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                if (data.success) {
                    // ล้างการแสดงผล
                    clearChatDisplay();
                    
                    // อัปเดตรายชื่อผู้ใช้
                    loadUsers();
                    
                    alert('ล้างประวัติการสนทนาเรียบร้อยแล้ว');
                } else {
                    alert('ไม่สามารถล้างประวัติการสนทนาได้: ' + data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการล้างประวัติการสนทนา:', error);
                alert('เกิดข้อผิดพลาดในการล้างประวัติการสนทนา');
            }
        }

        function clearChatDisplay() {
            document.getElementById('chatContainer').innerHTML = `
                <div class="text-center p-5 text-muted">
                    <i class="fas fa-comments fa-3x mb-3"></i>
                    <h5>ยินดีต้อนรับสู่ระบบแอดมินแชท</h5>
                    <p>เลือกผู้ใช้จากรายชื่อด้านซ้ายเพื่อเริ่มการสนทนา</p>
                </div>
            `;
            document.getElementById('messageInput').style.display = 'none';
            document.getElementById('chatHeader').innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-comments me-2"></i>
                    เลือกผู้ใช้เพื่อเริ่มการสนทนา
                </div>
            `;
            currentUserId = null;
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) return 'เมื่อสักครู่';
            if (diffMins < 60) return `${diffMins} นาทีที่แล้ว`;
            if (diffHours < 24) return `${diffHours} ชั่วโมงที่แล้ว`;
            if (diffDays < 7) return `${diffDays} วันที่แล้ว`;
            
            return date.toLocaleDateString('th-TH', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // ฟังก์ชันเปิดรูปภาพในโมดัล
        function openImageModal(imageSrc) {
            // คำนวณขนาดไฟล์ base64 (ประมาณ)
            const base64Data = imageSrc.split(',')[1];
            const base64Size = Math.ceil((base64Data.length * 3) / 4);
            const sizeKB = (base64Size / 1024).toFixed(1);
            
            const modal = document.createElement('div');
            modal.className = 'image-modal';
            modal.innerHTML = `
                <div class="image-modal-content">
                    <span class="image-modal-close" onclick="this.parentElement.parentElement.remove()">&times;</span>
                    <img src="${imageSrc}" alt="รูปภาพเต็มขนาด" class="image-modal-image">
                    <div class="image-modal-info">
                        <div class="image-metadata">
                            <small class="text-muted">
                                <i class="fas fa-image me-1"></i>
                                รูปภาพ JPEG (${sizeKB} KB)
                            </small>
                        </div>
                        <div class="image-actions mt-2">
                            <button class="btn btn-sm btn-outline-primary me-2" onclick="downloadImage('${imageSrc}', 'line_image.jpg')">
                                <i class="fas fa-download me-1"></i>ดาวน์โหลด
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" onclick="copyImageToClipboard('${imageSrc}')">
                                <i class="fas fa-copy me-1"></i>คัดลอก
                            </button>
                        </div>
                        <small class="text-muted d-block mt-2">คลิกที่รูปภาพเพื่อดูขนาดเต็ม | กด ESC เพื่อปิด</small>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // ปิดโมดัลเมื่อคลิกนอกรูปภาพ
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.remove();
                }
            });
            
            // ปิดโมดัลเมื่อกด ESC
            document.addEventListener('keydown', function closeOnEsc(e) {
                if (e.key === 'Escape') {
                    modal.remove();
                    document.removeEventListener('keydown', closeOnEsc);
                }
            });
            
            // ปิดโมดัลเมื่อกด Enter
            document.addEventListener('keydown', function closeOnEnter(e) {
                if (e.key === 'Enter') {
                    modal.remove();
                    document.removeEventListener('keydown', closeOnEnter);
                }
            });
            
            // Focus ที่ modal เพื่อให้ keyboard events ทำงาน
            modal.focus();
        }

        // ฟังก์ชันดาวน์โหลดรูปภาพ
        function downloadImage(dataUrl, filename) {
            const link = document.createElement('a');
            link.href = dataUrl;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // ฟังก์ชันคัดลอกรูปภาพไปยัง clipboard (สำหรับเบราว์เซอร์ที่รองรับ)
        async function copyImageToClipboard(dataUrl) {
            try {
                const response = await fetch(dataUrl);
                const blob = await response.blob();
                await navigator.clipboard.write([
                    new ClipboardItem({
                        [blob.type]: blob
                    })
                ]);
                
                // แสดงข้อความสำเร็จ
                const toast = document.createElement('div');
                toast.className = 'toast-notification';
                toast.innerHTML = '<i class="fas fa-check-circle text-success me-2"></i>คัดลอกรูปภาพเรียบร้อยแล้ว';
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            } catch (error) {
                console.error('ไม่สามารถคัดลอกรูปภาพได้:', error);
                
                // แสดงข้อความผิดพลาด
                const toast = document.createElement('div');
                toast.className = 'toast-notification error';
                toast.innerHTML = '<i class="fas fa-exclamation-circle text-danger me-2"></i>ไม่สามารถคัดลอกรูปภาพได้';
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        }

        // ฟังก์ชันช่วยจัดการข้อความในคิว
        function processQueueMessage(content) {
            try {
                const parsed = JSON.parse(content);
                
                if (Array.isArray(parsed)) {
                    // กรณีเป็น array ของข้อความในคิว
                    const textParts = [];
                    const imageParts = [];
                    
                    parsed.forEach(item => {
                        if (item.data) {
                            if (item.data.type === 'text' && item.data.text) {
                                textParts.push(item.data.text);
                            } else if (item.data.type === 'image' && item.data.base64) {
                                imageParts.push(item.data);
                            }
                        }
                    });
                    
                    return { textParts, imageParts, type: 'queue' };
                } else if (parsed && parsed.data) {
                    // กรณีเป็นข้อความเดี่ยวที่มี data
                    if (parsed.data.type === 'image') {
                        return {
                            textParts: [],
                            imageParts: [parsed.data],
                            type: 'single_image'
                        };
                    } else if (parsed.data.type === 'text') {
                        return {
                            textParts: [parsed.data.text],
                            imageParts: [],
                            type: 'single_text'
                        };
                    }
                } else if (parsed && parsed.type) {
                    // รองรับโครงสร้างแบบไม่มี data wrapper
                    if (parsed.type === 'image' && parsed.base64) {
                        return {
                            textParts: [],
                            imageParts: [parsed],
                            type: 'single_image'
                        };
                    } else if (parsed.type === 'text' && parsed.text) {
                        return {
                            textParts: [parsed.text],
                            imageParts: [],
                            type: 'single_text'
                        };
                    }
                }

                return { textParts: [], imageParts: [], type: 'unknown' };
            } catch (e) {
                return { textParts: [], imageParts: [], type: 'error', error: e.message };
            }
        }

        // ฟังก์ชันสร้าง HTML สำหรับข้อความรูปภาพ
        function createImageMessageHTML(imageData, index = 0) {
            // คำนวณขนาดไฟล์ base64 (ประมาณ)
            const base64Size = Math.ceil((imageData.base64.length * 3) / 4);
            const sizeKB = (base64Size / 1024).toFixed(1);
            
            return `
                <div class="message-image">
                    <img src="data:image/jpeg;base64,${imageData.base64}" 
                         alt="รูปภาพจากผู้ใช้ ${index + 1}" 
                         class="user-uploaded-image"
                         onclick="openImageModal(this.src)"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <div class="image-error-fallback" style="display: none;">
                        <i class="fas fa-image text-muted"></i>
                        <div class="text-muted small">ไม่สามารถแสดงรูปภาพได้</div>
                    </div>
                    <div class="image-info">
                        <small class="text-muted">
                            <i class="fas fa-image me-1"></i>
                            รูปภาพ JPEG (${sizeKB} KB)
                        </small>
                    </div>
                </div>
            `;
        }

        // ฟังก์ชันสร้างข้อความแบบ compact สำหรับข้อความหลายประเภท
        function createCompactMessageHTML(processed) {
            let contentHtml = '';
            
            // แสดงข้อความ
            if (processed.textParts.length > 0) {
                const textContent = processed.textParts.join(' ');
                if (textContent.trim()) {
                    contentHtml += `<div class="message-text">${escapeHtml(textContent)}</div>`;
                }
            }
            
            // แสดงรูปภาพแบบ compact ถ้ามีหลายรูป
            if (processed.imageParts.length > 0) {
                if (processed.imageParts.length === 1) {
                    // รูปเดียวแสดงเต็ม
                    contentHtml += createImageMessageHTML(processed.imageParts[0]);
                } else {
                    // หลายรูปแสดงแบบ grid
                    contentHtml += '<div class="image-grid">';
                    processed.imageParts.forEach((imageData, index) => {
                        contentHtml += `
                            <div class="image-grid-item">
                                <img src="data:image/jpeg;base64,${imageData.base64}" 
                                     alt="รูปภาพ ${index + 1}" 
                                     class="user-uploaded-image compact"
                                     onclick="openImageModal(this.src)"
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                                <div class="image-error-fallback compact" style="display: none;">
                                    <i class="fas fa-image text-muted"></i>
                                </div>
                            </div>
                        `;
                    });
                    contentHtml += '</div>';
                    contentHtml += `<div class="image-info">
                        <small class="text-muted">
                            <i class="fas fa-images me-1"></i>
                            รูปภาพ ${processed.imageParts.length} รูป
                        </small>
                    </div>`;
                }
            }
            
            return contentHtml;
        }

        // ฟังก์ชันสำหรับกรองข้อความสำหรับการแสดงผล
        async function filterMessageForDisplay(message) {
            try {
                const response = await fetch('/api/filter/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: message })
                });

                if (response.ok) {
                    const result = await response.json();
                    return result.filteredMessage;
                } else {
                    return message; // ส่งคืนข้อความต้นฉบับถ้าเกิดข้อผิดพลาด
                }
            } catch (error) {
                console.error('Error filtering message for display:', error);
                return message; // ส่งคืนข้อความต้นฉบับถ้าเกิดข้อผิดพลาด
            }
        }

        // Auto-refresh users every 30 seconds
        setInterval(loadUsers, 30000);
    </script>
</body>
</html> 
