<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แอดมินแชท - LINE Chatbot</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/chat.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">
                <i class="fas fa-robot"></i> จัดการ AI
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/dashboard">
                            <i class="fas fa-tachometer-alt"></i> แดชบอร์ด
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/broadcast">
                            <i class="fas fa-bullhorn"></i> บรอดแคสต์
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/admin/chat">
                            <i class="fas fa-comments"></i> แชท
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/followup">
                            <i class="fas fa-user-clock"></i> ติดตามลูกค้า
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/followup/status">
                            <i class="fas fa-chart-line"></i> สถานะติดตาม
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/settings">
                            <i class="fas fa-cogs"></i> ตั้งค่า
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin">
                            <i class="fas fa-sign-out-alt"></i> ออกจากระบบ
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Chat Application -->
    <div class="chat-app">
        <div class="chat-container">
            <!-- Sidebar -->
            <div class="chat-sidebar" id="chatSidebar">
                <div class="chat-sidebar-header">
                    <h2 class="chat-sidebar-title">
                        <i class="fas fa-comments"></i>
                        การสนทนา
                    </h2>
                    <div class="chat-search">
                        <i class="fas fa-search"></i>
                        <input type="text" id="userSearch" placeholder="ค้นหาผู้ใช้...">
                    </div>
                </div>
                <div class="chat-user-list" id="userList">
                    <div class="chat-loading">
                        <i class="fas fa-spinner fa-spin"></i>
                        กำลังโหลด...
                    </div>
                </div>
            </div>

            <!-- Main Chat Area -->
            <div class="chat-main">
                <!-- Chat Header -->
                <div class="chat-header" id="chatHeader">
                    <div class="chat-header-info">
                        <div class="chat-header-avatar" id="headerAvatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="chat-header-details">
                            <h3 id="headerName">เลือกผู้ใช้เพื่อเริ่มการสนทนา</h3>
                            <p id="headerStatus">คลิกที่รายชื่อผู้ใช้ด้านซ้าย</p>
                        </div>
                    </div>
                    <div class="chat-header-actions">
                        <button class="chat-header-btn" id="clearChatBtn" title="ล้างประวัติการสนทนา" style="display: none;">
                            <i class="fas fa-trash"></i>
                        </button>
                        <button class="chat-header-btn" id="mobileMenuBtn" style="display: none;">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="chat-messages" id="chatMessages">
                    <div class="chat-empty">
                        <div class="chat-empty-icon">
                            <i class="fas fa-comments"></i>
                        </div>
                        <h3>ยินดีต้อนรับสู่ระบบแอดมินแชท</h3>
                        <p>เลือกผู้ใช้จากรายชื่อด้านซ้ายเพื่อเริ่มการสนทนา</p>
                    </div>
                </div>

                <!-- Message Input -->
                <div class="chat-input-area" id="messageInput" style="display: none;">
                    <div class="chat-input-container">
                        <textarea class="chat-input" id="messageText" placeholder="พิมพ์ข้อความ..." maxlength="1000" rows="1"></textarea>
                        <button class="chat-send-btn" id="sendButton" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <div class="chat-char-count" id="charCount">0/1000</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div class="modal fade" id="loadingModal" tabindex="-1">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <i class="fas fa-spinner fa-spin fa-2x text-primary mb-2"></i>
                    <p class="mb-0">กำลังโหลด...</p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket;
        let currentUserId = null;
        let users = [];
        let chatHistory = {};
        let filteredUsers = [];

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeSocket();
            loadUsers();
            setupEventListeners();
            setupMobileMenu();
        });

        function initializeSocket() {
            socket = io();
            
            socket.on('connect', () => {
                console.log('เชื่อมต่อ Socket.IO สำเร็จ');
            });

            socket.on('newMessage', (data) => {
                console.log('ข้อความใหม่:', data);
                handleNewMessage(data);
            });

            socket.on('chatCleared', (data) => {
                if (data.userId === currentUserId) {
                    clearChatDisplay();
                }
                // อัปเดตรายชื่อผู้ใช้
                loadUsers();
            });
        }

        function setupEventListeners() {
            // ตัวนับอักขระ
            document.getElementById('messageText').addEventListener('input', function() {
                const count = this.value.length;
                const charCount = document.getElementById('charCount');
                const sendBtn = document.getElementById('sendButton');
                
                charCount.textContent = `${count}/1000`;
                
                // เปลี่ยนสีตามจำนวนอักขระ
                charCount.className = 'chat-char-count';
                if (count > 900) {
                    charCount.classList.add('error');
                } else if (count > 800) {
                    charCount.classList.add('warning');
                }
                
                // เปิด/ปิดปุ่มส่ง
                sendBtn.disabled = count === 0 || count > 1000;
                
                // ปรับขนาด textarea อัตโนมัติ
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });

            // ส่งข้อความ
            document.getElementById('sendButton').addEventListener('click', sendMessage);
            document.getElementById('messageText').addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // ค้นหาผู้ใช้
            document.getElementById('userSearch').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                filteredUsers = users.filter(user => 
                    user.displayName.toLowerCase().includes(searchTerm) ||
                    user.lastMessage.toLowerCase().includes(searchTerm)
                );
                renderUserList();
            });

            // ล้างประวัติการสนทนา
            document.getElementById('clearChatBtn').addEventListener('click', function() {
                if (currentUserId) {
                    clearUserChat(currentUserId);
                }
            });
        }

        function setupMobileMenu() {
            const mobileMenuBtn = document.getElementById('mobileMenuBtn');
            const sidebar = document.getElementById('chatSidebar');
            
            // แสดงปุ่มเมนูมือถือในหน้าจอเล็ก
            if (window.innerWidth <= 768) {
                mobileMenuBtn.style.display = 'flex';
            }
            
            mobileMenuBtn.addEventListener('click', function() {
                sidebar.classList.toggle('open');
            });
            
            // ปิดเมนูเมื่อคลิกข้างนอก
            document.addEventListener('click', function(e) {
                if (window.innerWidth <= 768 && 
                    !sidebar.contains(e.target) && 
                    !mobileMenuBtn.contains(e.target)) {
                    sidebar.classList.remove('open');
                }
            });
            
            // รีเซ็ตเมนูเมื่อเปลี่ยนขนาดหน้าจอ
            window.addEventListener('resize', function() {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('open');
                    mobileMenuBtn.style.display = 'none';
                } else {
                    mobileMenuBtn.style.display = 'flex';
                }
            });
        }

        async function loadUsers() {
            try {
                const response = await fetch('/admin/chat/users');
                const data = await response.json();
                
                if (data.success) {
                    users = data.users;
                    renderUserList();
                } else {
                    console.error('ไม่สามารถโหลดรายชื่อผู้ใช้ได้:', data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการโหลดรายชื่อผู้ใช้:', error);
            }
        }

        function renderUserList() {
            const userList = document.getElementById('userList');
            const displayUsers = filteredUsers.length > 0 ? filteredUsers : users;
            
            if (displayUsers.length === 0) {
                userList.innerHTML = `
                    <div class="chat-empty">
                        <div class="chat-empty-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>ไม่มีผู้ใช้</h3>
                        <p>ยังไม่มีผู้ใช้ในระบบ</p>
                    </div>
                `;
                return;
            }

            const userHtml = displayUsers.map(user => {
                const isActive = user.userId === currentUserId;
                const hasUnread = user.unreadCount > 0;
                
                return `
                    <div class="chat-user-item ${isActive ? 'active' : ''}" 
                         onclick="selectUser('${user.userId}')">
                        <div class="chat-user-avatar">
                            ${user.displayName.charAt(0).toUpperCase()}
                        </div>
                        <div class="chat-user-info">
                            <div class="chat-user-name">${user.displayName}</div>
                            <div class="chat-user-last-message">
                                ${user.lastMessage.substring(0, 40)}${user.lastMessage.length > 40 ? '...' : ''}
                            </div>
                        </div>
                        <div class="chat-user-meta">
                            <div class="chat-user-time">${formatTimestamp(user.lastTimestamp)}</div>
                            ${hasUnread ? `<div class="chat-user-badge">${user.unreadCount}</div>` : ''}
                        </div>
                    </div>
                `;
            }).join('');

            userList.innerHTML = userHtml;
        }

        async function selectUser(userId) {
            currentUserId = userId;
            
            // อัปเดต UI
            document.querySelectorAll('.chat-user-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.chat-user-item').classList.add('active');
            
            // แสดง chat header
            const user = users.find(u => u.userId === userId);
            if (user) {
                document.getElementById('headerAvatar').innerHTML = user.displayName.charAt(0).toUpperCase();
                document.getElementById('headerName').textContent = user.displayName;
                document.getElementById('headerStatus').textContent = `ข้อความ ${user.messageCount} ข้อความ`;
                document.getElementById('clearChatBtn').style.display = 'flex';
                
                // เพิ่มปุ่มค้นหาและส่งออกถ้ายังไม่มี
                if (!document.querySelector('.chat-header-btn[title="ค้นหาข้อความ"]')) {
                    addSearchButton();
                }
                if (!document.querySelector('.chat-header-btn[title="ส่งออกประวัติการสนทนา"]')) {
                    addExportButton();
                }
            }
            
            // แสดง input
            document.getElementById('messageInput').style.display = 'block';
            
            // ปิด sidebar ในมือถือ
            if (window.innerWidth <= 768) {
                document.getElementById('chatSidebar').classList.remove('open');
            }
            
            // โหลดประวัติการสนทนา
            await loadChatHistory(userId);
        }

        async function loadChatHistory(userId) {
            try {
                const response = await fetch(`/admin/chat/history/${userId}`);
                const data = await response.json();
                
                if (data.success) {
                    chatHistory[userId] = data.messages;
                    renderChatHistory(userId);
                } else {
                    console.error('ไม่สามารถโหลดประวัติการสนทนาได้:', data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการโหลดประวัติการสนทนา:', error);
            }
        }

        async function renderChatHistory(userId) {
            const container = document.getElementById('chatMessages');
            const messages = chatHistory[userId] || [];
            
            if (messages.length === 0) {
                container.innerHTML = `
                    <div class="chat-empty">
                        <div class="chat-empty-icon">
                            <i class="fas fa-comment-dots"></i>
                        </div>
                        <h3>ไม่มีประวัติการสนทนา</h3>
                        <p>เริ่มการสนทนากับผู้ใช้นี้</p>
                    </div>
                `;
                return;
            }

            const chatHtml = messages.map(message => {
                const messageClass = message.role === 'user' ? 'user' : 
                                   message.source === 'admin_chat' ? 'admin' : 'assistant';
                const senderLabel = message.role === 'user' ? 'ผู้ใช้' : 
                                  message.source === 'admin_chat' ? 'แอดมิน' : 'AI Assistant';
                
                // แสดงเฉพาะข้อความใน <reply></reply> tags ถ้ามี
                let displayContent = message.content;
                if (message.role !== 'user' && message.content.includes('<reply>')) {
                    const replyMatch = message.content.match(/<reply>(.*?)<\/reply>/s);
                    if (replyMatch) {
                        displayContent = replyMatch[1].trim();
                    }
                }

                // กรองข้อความสำหรับ Assistant (ถ้าเป็นข้อความจาก AI)
                if (message.role === 'assistant' && message.source !== 'admin_chat') {
                    // ใช้ Promise เพื่อไม่ให้เกิด linter error
                    filterMessageForDisplay(displayContent).then(filteredContent => {
                        // อัปเดตข้อความใน DOM หลังจากกรองเสร็จ
                        const messageElement = container.querySelector(`[data-message-id="${message.timestamp}"]`);
                        if (messageElement) {
                            const contentElement = messageElement.querySelector('.chat-message-text');
                            if (contentElement) {
                                contentElement.innerHTML = filteredContent;
                            }
                        }
                    });
                }

                // จัดการข้อความสำหรับผู้ใช้
                if (message.role === 'user') {
                    const processed = processQueueMessage(message.content);

                    if (processed.type === 'queue' || processed.type === 'single_image' || processed.type === 'single_text') {
                        displayContent = createCompactMessageHTML(processed);
                    } else {
                        // กรณีอื่นๆ ให้แสดงข้อความธรรมดา และรองรับการเว้นบรรทัด
                        displayContent = `<div class="chat-message-text">${escapeHtml(message.content)}</div>`;
                    }
                } else {
                    // สำหรับข้อความที่ไม่ใช่ผู้ใช้ ให้ escape HTML และรองรับการเว้นบรรทัด
                    displayContent = `<div class="chat-message-text">${escapeHtml(displayContent)}</div>`;
                }
                
                return `
                    <div class="chat-message ${messageClass}" data-message-id="${message.timestamp}">
                        <div class="chat-message-header">
                            <span class="chat-message-sender">${senderLabel}</span>
                            <span class="chat-message-time">${formatTimestamp(message.timestamp)}</span>
                        </div>
                        <div class="chat-message-content">
                            ${displayContent}
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = chatHtml;
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const messageText = document.getElementById('messageText').value.trim();
            if (!messageText || !currentUserId) return;

            try {
                const response = await fetch('/admin/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: currentUserId,
                        message: messageText
                    })
                });

                const data = await response.json();
                if (data.success) {
                    // เพิ่มข้อความใหม่ลงในประวัติ
                    const newMessage = {
                        content: messageText,
                        role: 'assistant',
                        timestamp: new Date(),
                        source: 'admin_chat'
                    };
                    
                    if (!chatHistory[currentUserId]) {
                        chatHistory[currentUserId] = [];
                    }
                    chatHistory[currentUserId].push(newMessage);
                    
                    // อัปเดตการแสดงผล
                    renderChatHistory(currentUserId);
                    
                    // ล้าง input
                    document.getElementById('messageText').value = '';
                    document.getElementById('charCount').textContent = '0';
                    
                    // อัปเดตรายชื่อผู้ใช้
                    loadUsers();
                } else {
                    alert('ไม่สามารถส่งข้อความได้: ' + data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการส่งข้อความ:', error);
                alert('เกิดข้อผิดพลาดในการส่งข้อความ');
            }
        }

        function handleNewMessage(data) {
            // อัปเดต unread count สำหรับผู้ใช้
            const user = users.find(u => u.userId === data.userId);
            if (user) {
                user.unreadCount = (user.unreadCount || 0) + 1;
                user.lastMessage = data.message.content;
                user.lastTimestamp = data.timestamp;
                
                // อัปเดตการแสดงผล
                renderUserList();
                
                // ถ้าเป็นผู้ใช้ที่กำลังดูอยู่ ให้อัปเดตการสนทนา
                if (data.userId === currentUserId) {
                    if (!chatHistory[currentUserId]) {
                        chatHistory[currentUserId] = [];
                    }
                    chatHistory[currentUserId].push(data.message);
                    renderChatHistory(currentUserId);
                }
            }
        }

        async function clearUserChat(userId) {
            if (!confirm('คุณแน่ใจหรือไม่ที่จะล้างประวัติการสนทนาของผู้ใช้นี้?')) {
                return;
            }

            try {
                const response = await fetch(`/admin/chat/clear/${userId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                if (data.success) {
                    // ล้างการแสดงผล
                    clearChatDisplay();
                    
                    // อัปเดตรายชื่อผู้ใช้
                    loadUsers();
                    
                    alert('ล้างประวัติการสนทนาเรียบร้อยแล้ว');
                } else {
                    alert('ไม่สามารถล้างประวัติการสนทนาได้: ' + data.error);
                }
            } catch (error) {
                console.error('ข้อผิดพลาดในการล้างประวัติการสนทนา:', error);
                alert('เกิดข้อผิดพลาดในการล้างประวัติการสนทนา');
            }
        }

        function clearChatDisplay() {
            document.getElementById('chatMessages').innerHTML = `
                <div class="chat-empty">
                    <div class="chat-empty-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <h3>ยินดีต้อนรับสู่ระบบแอดมินแชท</h3>
                    <p>เลือกผู้ใช้จากรายชื่อด้านซ้ายเพื่อเริ่มการสนทนา</p>
                </div>
            `;
            document.getElementById('messageInput').style.display = 'none';
            document.getElementById('headerAvatar').innerHTML = '<i class="fas fa-user"></i>';
            document.getElementById('headerName').textContent = 'เลือกผู้ใช้เพื่อเริ่มการสนทนา';
            document.getElementById('headerStatus').textContent = 'คลิกที่รายชื่อผู้ใช้ด้านซ้าย';
            document.getElementById('clearChatBtn').style.display = 'none';
            currentUserId = null;
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) return 'เมื่อสักครู่';
            if (diffMins < 60) return `${diffMins} นาทีที่แล้ว`;
            if (diffHours < 24) return `${diffHours} ชั่วโมงที่แล้ว`;
            if (diffDays < 7) return `${diffDays} วันที่แล้ว`;
            
            return date.toLocaleDateString('th-TH', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // ฟังก์ชันเปิดรูปภาพในโมดัล
        function openImageModal(imageSrc) {
            // คำนวณขนาดไฟล์ base64 (ประมาณ)
            const base64Data = imageSrc.split(',')[1];
            const base64Size = Math.ceil((base64Data.length * 3) / 4);
            const sizeKB = (base64Size / 1024).toFixed(1);
            
            const modal = document.createElement('div');
            modal.className = 'chat-image-modal';
            modal.innerHTML = `
                <div class="chat-image-modal-content">
                    <button class="chat-image-modal-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                    <img src="${imageSrc}" alt="รูปภาพเต็มขนาด">
                    <div class="chat-image-modal-info">
                        <div class="image-metadata">
                            <small class="text-muted">
                                <i class="fas fa-image"></i>
                                รูปภาพ JPEG (${sizeKB} KB)
                            </small>
                        </div>
                        <div class="chat-image-modal-actions">
                            <button class="chat-image-modal-btn primary" onclick="downloadImage('${imageSrc}', 'line_image.jpg')">
                                <i class="fas fa-download"></i> ดาวน์โหลด
                            </button>
                            <button class="chat-image-modal-btn" onclick="copyImageToClipboard('${imageSrc}')">
                                <i class="fas fa-copy"></i> คัดลอก
                            </button>
                        </div>
                        <small class="text-muted">กด ESC เพื่อปิด</small>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // ปิดโมดัลเมื่อคลิกนอกรูปภาพ
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.remove();
                }
            });
            
            // ปิดโมดัลเมื่อกด ESC
            document.addEventListener('keydown', function closeOnEsc(e) {
                if (e.key === 'Escape') {
                    modal.remove();
                    document.removeEventListener('keydown', closeOnEsc);
                }
            });
            
            // Focus ที่ modal เพื่อให้ keyboard events ทำงาน
            modal.focus();
        }

        // ฟังก์ชันดาวน์โหลดรูปภาพ
        function downloadImage(dataUrl, filename) {
            const link = document.createElement('a');
            link.href = dataUrl;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // ฟังก์ชันคัดลอกรูปภาพไปยัง clipboard (สำหรับเบราว์เซอร์ที่รองรับ)
        async function copyImageToClipboard(dataUrl) {
            try {
                const response = await fetch(dataUrl);
                const blob = await response.blob();
                await navigator.clipboard.write([
                    new ClipboardItem({
                        [blob.type]: blob
                    })
                ]);
                
                // แสดงข้อความสำเร็จ
                showNotification('คัดลอกรูปภาพเรียบร้อยแล้ว', 'success');
            } catch (error) {
                console.error('ไม่สามารถคัดลอกรูปภาพได้:', error);
                showNotification('ไม่สามารถคัดลอกรูปภาพได้', 'error');
            }
        }

        // ฟังก์ชันแสดงการแจ้งเตือน
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `chat-notification ${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                ${message}
            `;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // ฟังก์ชันช่วยจัดการข้อความในคิว
        function processQueueMessage(content) {
            try {
                const parsed = JSON.parse(content);
                
                if (Array.isArray(parsed)) {
                    // กรณีเป็น array ของข้อความในคิว
                    const textParts = [];
                    const imageParts = [];
                    
                    parsed.forEach(item => {
                        if (item.data) {
                            if (item.data.type === 'text' && item.data.text) {
                                textParts.push(item.data.text);
                            } else if (item.data.type === 'image' && item.data.base64) {
                                imageParts.push(item.data);
                            }
                        }
                    });
                    
                    return { textParts, imageParts, type: 'queue' };
                } else if (parsed && parsed.data) {
                    // กรณีเป็นข้อความเดี่ยวที่มี data
                    if (parsed.data.type === 'image') {
                        return {
                            textParts: [],
                            imageParts: [parsed.data],
                            type: 'single_image'
                        };
                    } else if (parsed.data.type === 'text') {
                        return {
                            textParts: [parsed.data.text],
                            imageParts: [],
                            type: 'single_text'
                        };
                    }
                } else if (parsed && parsed.type) {
                    // รองรับโครงสร้างแบบไม่มี data wrapper
                    if (parsed.type === 'image' && parsed.base64) {
                        return {
                            textParts: [],
                            imageParts: [parsed],
                            type: 'single_image'
                        };
                    } else if (parsed.type === 'text' && parsed.text) {
                        return {
                            textParts: [parsed.text],
                            imageParts: [],
                            type: 'single_text'
                        };
                    }
                }

                return { textParts: [], imageParts: [], type: 'unknown' };
            } catch (e) {
                return { textParts: [], imageParts: [], type: 'error', error: e.message };
            }
        }

        // ฟังก์ชันสร้าง HTML สำหรับข้อความรูปภาพ
        function createImageMessageHTML(imageData, index = 0) {
            // คำนวณขนาดไฟล์ base64 (ประมาณ)
            const base64Size = Math.ceil((imageData.base64.length * 3) / 4);
            const sizeKB = (base64Size / 1024).toFixed(1);
            
            return `
                <div class="chat-message-image">
                    <img src="data:image/jpeg;base64,${imageData.base64}" 
                         alt="รูปภาพจากผู้ใช้ ${index + 1}" 
                         onclick="openImageModal(this.src)"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <div class="image-error-fallback" style="display: none;">
                        <i class="fas fa-image"></i>
                        <div>ไม่สามารถแสดงรูปภาพได้</div>
                    </div>
                    <div class="image-info">
                        <small class="text-muted">
                            <i class="fas fa-image"></i>
                            รูปภาพ JPEG (${sizeKB} KB)
                        </small>
                    </div>
                </div>
            `;
        }

        // ฟังก์ชันสร้างข้อความแบบ compact สำหรับข้อความหลายประเภท
        function createCompactMessageHTML(processed) {
            let contentHtml = '';
            
            // แสดงข้อความ
            if (processed.textParts.length > 0) {
                const textContent = processed.textParts.join(' ');
                if (textContent.trim()) {
                    contentHtml += `<div class="chat-message-text">${escapeHtml(textContent)}</div>`;
                }
            }
            
            // แสดงรูปภาพแบบ compact ถ้ามีหลายรูป
            if (processed.imageParts.length > 0) {
                if (processed.imageParts.length === 1) {
                    // รูปเดียวแสดงเต็ม
                    contentHtml += createImageMessageHTML(processed.imageParts[0]);
                } else {
                    // หลายรูปแสดงแบบ grid
                    contentHtml += '<div class="chat-image-grid">';
                    processed.imageParts.forEach((imageData, index) => {
                        contentHtml += `
                            <img src="data:image/jpeg;base64,${imageData.base64}" 
                                 alt="รูปภาพ ${index + 1}" 
                                 onclick="openImageModal(this.src)"
                                 onerror="this.style.display='none';">
                        `;
                    });
                    contentHtml += '</div>';
                    contentHtml += `<div class="image-info">
                        <small class="text-muted">
                            <i class="fas fa-images"></i>
                            รูปภาพ ${processed.imageParts.length} รูป
                        </small>
                    </div>`;
                }
            }
            
            return contentHtml;
        }

        // ฟังก์ชันสำหรับกรองข้อความสำหรับการแสดงผล
        async function filterMessageForDisplay(message) {
            try {
                const response = await fetch('/api/filter/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ message: message })
                });

                if (response.ok) {
                    const result = await response.json();
                    return result.filteredMessage;
                } else {
                    return message; // ส่งคืนข้อความต้นฉบับถ้าเกิดข้อผิดพลาด
                }
            } catch (error) {
                console.error('Error filtering message for display:', error);
                return message; // ส่งคืนข้อความต้นฉบับถ้าเกิดข้อผิดพลาด
            }
        }

        // Auto-refresh users every 30 seconds
        setInterval(loadUsers, 30000);

        // เพิ่มฟีเจอร์ใหม่
        function addTypingIndicator() {
            const messagesContainer = document.getElementById('chatMessages');
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'chat-typing';
            typingIndicator.id = 'typingIndicator';
            typingIndicator.innerHTML = `
                <div class="chat-typing-dots">
                    <div class="chat-typing-dot"></div>
                    <div class="chat-typing-dot"></div>
                    <div class="chat-typing-dot"></div>
                </div>
                <span>กำลังพิมพ์...</span>
            `;
            messagesContainer.appendChild(typingIndicator);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        // เพิ่มการแสดงสถานะการพิมพ์
        let typingTimeout;
        document.getElementById('messageText').addEventListener('input', function() {
            if (currentUserId) {
                // ส่งสัญญาณการพิมพ์
                socket.emit('typing', { userId: currentUserId, isTyping: true });
                
                // ล้าง timeout เก่า
                clearTimeout(typingTimeout);
                
                // ตั้ง timeout เพื่อหยุดการพิมพ์
                typingTimeout = setTimeout(() => {
                    socket.emit('typing', { userId: currentUserId, isTyping: false });
                }, 1000);
            }
        });

        // รับสัญญาณการพิมพ์
        socket.on('userTyping', (data) => {
            if (data.userId === currentUserId) {
                if (data.isTyping) {
                    addTypingIndicator();
                } else {
                    removeTypingIndicator();
                }
            }
        });

        // เพิ่มการแจ้งเตือนเสียง
        function playNotificationSound() {
            try {
                const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
                audio.volume = 0.3;
                audio.play().catch(e => console.log('ไม่สามารถเล่นเสียงได้:', e));
            } catch (e) {
                console.log('ไม่สามารถเล่นเสียงได้:', e);
            }
        }

        // เพิ่มการแจ้งเตือนเมื่อมีข้อความใหม่
        socket.on('newMessage', (data) => {
            if (data.userId !== currentUserId) {
                playNotificationSound();
                showNotification(`ข้อความใหม่จาก ${data.senderName}`, 'info');
            }
        });

        // เพิ่มการบันทึกการสนทนา
        function exportChatHistory() {
            if (!currentUserId) {
                showNotification('กรุณาเลือกผู้ใช้ก่อน', 'warning');
                return;
            }

            const messages = chatHistory[currentUserId] || [];
            if (messages.length === 0) {
                showNotification('ไม่มีประวัติการสนทนา', 'warning');
                return;
            }

            const user = users.find(u => u.userId === currentUserId);
            const chatData = {
                user: user.displayName,
                exportDate: new Date().toLocaleString('th-TH'),
                messages: messages.map(msg => ({
                    sender: msg.role === 'user' ? 'ผู้ใช้' : msg.source === 'admin_chat' ? 'แอดมิน' : 'AI Assistant',
                    content: msg.content,
                    timestamp: new Date(msg.timestamp).toLocaleString('th-TH')
                }))
            };

            const dataStr = JSON.stringify(chatData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `chat_${user.displayName}_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            showNotification('ส่งออกประวัติการสนทนาเรียบร้อยแล้ว', 'success');
        }

        // เพิ่มปุ่มส่งออกประวัติ
        function addExportButton() {
            const headerActions = document.querySelector('.chat-header-actions');
            const exportBtn = document.createElement('button');
            exportBtn.className = 'chat-header-btn';
            exportBtn.title = 'ส่งออกประวัติการสนทนา';
            exportBtn.innerHTML = '<i class="fas fa-download"></i>';
            exportBtn.onclick = exportChatHistory;
            headerActions.insertBefore(exportBtn, headerActions.firstChild);
        }



        // เพิ่มการค้นหาข้อความ
        function searchMessages() {
            const searchTerm = prompt('ค้นหาข้อความ:');
            if (!searchTerm || !currentUserId) return;

            const messages = chatHistory[currentUserId] || [];
            const filteredMessages = messages.filter(msg => 
                msg.content.toLowerCase().includes(searchTerm.toLowerCase())
            );

            if (filteredMessages.length === 0) {
                showNotification('ไม่พบข้อความที่ค้นหา', 'warning');
                return;
            }

            // แสดงผลการค้นหา
            const container = document.getElementById('chatMessages');
            const searchResults = filteredMessages.map(message => {
                const messageClass = message.role === 'user' ? 'user' : 
                                   message.source === 'admin_chat' ? 'admin' : 'assistant';
                const senderLabel = message.role === 'user' ? 'ผู้ใช้' : 
                                  message.source === 'admin_chat' ? 'แอดมิน' : 'AI Assistant';
                
                return `
                    <div class="chat-message ${messageClass}" data-message-id="${message.timestamp}">
                        <div class="chat-message-header">
                            <span class="chat-message-sender">${senderLabel}</span>
                            <span class="chat-message-time">${formatTimestamp(message.timestamp)}</span>
                        </div>
                        <div class="chat-message-content">
                            <div class="chat-message-text">${escapeHtml(message.content)}</div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = `
                <div class="chat-search-results">
                    <div class="search-header">
                        <h4>ผลการค้นหา: "${searchTerm}" (${filteredMessages.length} ข้อความ)</h4>
                        <button class="btn btn-sm btn-outline-secondary" onclick="renderChatHistory('${currentUserId}')">
                            <i class="fas fa-arrow-left"></i> กลับสู่ประวัติทั้งหมด
                        </button>
                    </div>
                    ${searchResults}
                </div>
            `;
        }

        // เพิ่มปุ่มค้นหา
        function addSearchButton() {
            const headerActions = document.querySelector('.chat-header-actions');
            const searchBtn = document.createElement('button');
            searchBtn.className = 'chat-header-btn';
            searchBtn.title = 'ค้นหาข้อความ';
            searchBtn.innerHTML = '<i class="fas fa-search"></i>';
            searchBtn.onclick = searchMessages;
            headerActions.insertBefore(searchBtn, headerActions.firstChild);
        }


    </script>
</body>
</html> 